
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_auto_repair.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_auto_repair.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_auto_repair.py:


===========================
Automatically repair epochs
===========================

This example demonstrates how to use :mod:`autoreject` to automatically
repair epochs.

.. GENERATED FROM PYTHON SOURCE LINES 9-14

.. code-block:: default


    # Author: Mainak Jas <mainak.jas@telecom-paristech.fr>
    #         Denis A. Engemann <denis.engemann@gmail.com>
    # License: BSD-3-Clause








.. GENERATED FROM PYTHON SOURCE LINES 15-27

Let us first define the parameters. `n_interpolates` are the :math:`\rho`
values that we would like :mod:`autoreject` to try and `consensus_percs`
are the :math:`\kappa` values that :mod:`autoreject` will try (see the
`autoreject paper <https://doi.org/10.1016/j.neuroimage.2017.06.030>`_) for
more information on these parameters).

Epochs with more than :math:`\kappa * N` sensors (:math:`N` total sensors)
bad are dropped. For the rest of the epochs, the worst :math:`\rho`
bad sensors (as determined by channel-level thresholds) are interpolated.
The exact values of these parameters are not preselected but learned from
the data. If the number of bad sensors for a particular trial is less than
:math:`\rho`, all the bad sensors are interpolated.

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: default

    import numpy as np

    n_interpolates = np.array([1, 4, 32])
    consensus_percs = np.linspace(0, 1.0, 11)








.. GENERATED FROM PYTHON SOURCE LINES 35-37

For the purposes of this example, we shall use the MNE sample dataset.
Therefore, let us make some MNE related imports.

.. GENERATED FROM PYTHON SOURCE LINES 37-42

.. code-block:: default


    import mne  # noqa
    from mne.utils import check_random_state  # noqa
    from mne.datasets import sample  # noqa








.. GENERATED FROM PYTHON SOURCE LINES 43-47

Now, we can import the class required for rejecting and repairing bad
epochs. :func:`autoreject.compute_thresholds` is a callable which must be
provided to the :class:`autoreject.AutoReject` class for computing
the channel-level thresholds.

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default


    from autoreject import (AutoReject, set_matplotlib_defaults)  # noqa








.. GENERATED FROM PYTHON SOURCE LINES 51-52

Let us now read in the raw `fif` file for MNE sample dataset.

.. GENERATED FROM PYTHON SOURCE LINES 52-60

.. code-block:: default


    check_random_state(42)

    data_path = sample.data_path()
    meg_path = data_path / 'MEG' / 'sample'
    raw_fname = meg_path / 'sample_audvis_filt-0-40_raw.fif'
    raw = mne.io.read_raw_fif(raw_fname, preload=True)








.. GENERATED FROM PYTHON SOURCE LINES 61-62

We can then read in the events

.. GENERATED FROM PYTHON SOURCE LINES 62-69

.. code-block:: default


    event_fname = meg_path / 'sample_audvis_filt-0-40_raw-eve.fif'
    event_id = {'Auditory/Left': 1, 'Auditory/Right': 2}
    tmin, tmax = -0.2, 0.5

    events = mne.read_events(event_fname)








.. GENERATED FROM PYTHON SOURCE LINES 70-72

And pick MEG channels for repairing. Currently, :mod:`autoreject` can repair
only one channel type at a time.

.. GENERATED FROM PYTHON SOURCE LINES 72-77

.. code-block:: default


    raw.info['bads'] = []
    picks = mne.pick_types(raw.info, meg='grad', eeg=False, stim=False, eog=False,
                           include=[], exclude=[])








.. GENERATED FROM PYTHON SOURCE LINES 78-81

Now, we can create epochs. The ``reject`` params will be set to ``None``
because we do not want epochs to be dropped when instantiating
:class:`mne.Epochs`.

.. GENERATED FROM PYTHON SOURCE LINES 81-86

.. code-block:: default

    raw.del_proj()  # remove proj, don't proj while interpolating
    epochs = mne.Epochs(raw, events, event_id, tmin, tmax,
                        baseline=(None, 0), reject=None,
                        verbose=False, detrend=0, preload=True)








.. GENERATED FROM PYTHON SOURCE LINES 87-89

:class:`autoreject.AutoReject` internally does cross-validation to
determine the optimal values :math:`\rho^{*}` and :math:`\kappa^{*}`

.. GENERATED FROM PYTHON SOURCE LINES 91-97

Note that :class:`autoreject.AutoReject` by design supports
multiple channels.
If no picks are passed, separate solutions will be computed for each channel
type and internally combined. This then readily supports cleaning
unseen epochs from the different channel types used during fit.
Here we only use a subset of channels to save time.

.. GENERATED FROM PYTHON SOURCE LINES 97-108

.. code-block:: default


    ar = AutoReject(n_interpolates, consensus_percs, picks=picks,
                    thresh_method='random_search', random_state=42)

    # Note that fitting and transforming can be done on different compatible
    # portions of data if needed.
    ar.fit(epochs['Auditory/Left'])
    epochs_clean = ar.transform(epochs['Auditory/Left'])
    evoked_clean = epochs_clean.average()
    evoked = epochs['Auditory/Left'].average()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Running autoreject on ch_type=grad




    Estimated consensus=0.50 and n_interpolate=4
    No bad epochs were found for your data. Returning a copy of the data you wanted to clean. Interpolation may have been done.




.. GENERATED FROM PYTHON SOURCE LINES 109-110

Now, we will manually mark the bad channels just for plotting.

.. GENERATED FROM PYTHON SOURCE LINES 110-114

.. code-block:: default


    evoked.info['bads'] = ['MEG 2443']
    evoked_clean.info['bads'] = ['MEG 2443']








.. GENERATED FROM PYTHON SOURCE LINES 115-116

Let us plot the results.

.. GENERATED FROM PYTHON SOURCE LINES 116-135

.. code-block:: default


    import matplotlib.pyplot as plt  # noqa
    set_matplotlib_defaults(plt)

    fig, axes = plt.subplots(2, 1, figsize=(6, 6))

    for ax in axes:
        ax.tick_params(axis='x', which='both', bottom='off', top='off')
        ax.tick_params(axis='y', which='both', left='off', right='off')

    ylim = dict(grad=(-170, 200))
    evoked.pick_types(meg='grad', exclude=[])
    evoked.plot(exclude=[], axes=axes[0], ylim=ylim, show=False)
    axes[0].set_title('Before autoreject')
    evoked_clean.pick_types(meg='grad', exclude=[])
    evoked_clean.plot(exclude=[], axes=axes[1], ylim=ylim)
    axes[1].set_title('After autoreject')
    plt.tight_layout()




.. image-sg:: /auto_examples/images/sphx_glr_plot_auto_repair_001.png
   :alt: Before autoreject, After autoreject
   :srcset: /auto_examples/images/sphx_glr_plot_auto_repair_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/larsoner/python/autoreject/examples/plot_auto_repair.py:133: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
      plt.tight_layout()




.. GENERATED FROM PYTHON SOURCE LINES 136-138

To top things up, we can also visualize the bad sensors for each trial using
a heatmap.

.. GENERATED FROM PYTHON SOURCE LINES 138-140

.. code-block:: default


    ar.get_reject_log(epochs['Auditory/Left']).plot()



.. image-sg:: /auto_examples/images/sphx_glr_plot_auto_repair_002.png
   :alt: plot auto repair
   :srcset: /auto_examples/images/sphx_glr_plot_auto_repair_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x600 with 1 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  4.002 seconds)


.. _sphx_glr_download_auto_examples_plot_auto_repair.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_auto_repair.py <plot_auto_repair.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_auto_repair.ipynb <plot_auto_repair.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
