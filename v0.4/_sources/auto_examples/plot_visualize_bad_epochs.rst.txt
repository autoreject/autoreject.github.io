
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_visualize_bad_epochs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_visualize_bad_epochs.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_visualize_bad_epochs.py:


===============================
Visualize bad sensors per trial
===============================

This example demonstrates how to use :mod:`autoreject` to
visualize the bad sensors in each trial

.. GENERATED FROM PYTHON SOURCE LINES 9-16

.. code-block:: default


    # Author: Mainak Jas <mainak.jas@telecom-paristech.fr>
    #         Denis A. Engemann <denis.engemann@gmail.com>
    # License: BSD-3-Clause

    # sphinx_gallery_thumbnail_number = 2








.. GENERATED FROM PYTHON SOURCE LINES 17-20

First, we download the data from OpenfMRI which is hosted on OpenNeuro.
We will do this using ``openneuro-py`` which can be installed using pip
(``pip install openneuro-py``).

.. GENERATED FROM PYTHON SOURCE LINES 20-36

.. code-block:: default


    import os
    import openneuro
    import autoreject

    dataset = 'ds000117'  # The id code on OpenNeuro for this example dataset
    subject_id = 16  # OpenfMRI format of subject numbering

    target_dir = os.path.join(
        os.path.dirname(autoreject.__file__), '..', 'examples', dataset)
    if not os.path.isdir(target_dir):
        os.makedirs(target_dir)

    openneuro.download(dataset=dataset, target_dir=target_dir,
                       include=[f'sub-{subject_id}/ses-meg/'])








.. GENERATED FROM PYTHON SOURCE LINES 37-40

We will create epochs with data starting 200 ms before trigger onset
and continuing up to 800 ms after that. The data contains visual stimuli for
famous faces, unfamiliar faces, as well as scrambled faces.

.. GENERATED FROM PYTHON SOURCE LINES 40-44

.. code-block:: default


    tmin, tmax = -0.2, 0.8
    events_id = {'famous/first': 5, 'famous/immediate': 6, 'famous/long': 7}








.. GENERATED FROM PYTHON SOURCE LINES 45-46

Let us now load all the epochs into memory and concatenate them

.. GENERATED FROM PYTHON SOURCE LINES 46-79

.. code-block:: default


    import mne  # noqa

    epochs = list()
    for run in range(3, 7):
        run_fname = os.path.join(target_dir, f'sub-{subject_id}', 'ses-meg', 'meg',
                                 f'sub-{subject_id}_ses-meg_task-facerecognition'
                                 '_run-{:02d}_meg.fif'.format(run))
        raw = mne.io.read_raw_fif(run_fname, preload=True)
        raw.pick_types(eeg=True, meg=False, stim=True)  # less memory + computation
        raw.filter(1., 40., l_trans_bandwidth=0.5, n_jobs=1, verbose='INFO')

        raw.set_channel_types({'EEG061': 'eog', 'EEG062': 'eog',
                               'EEG063': 'ecg', 'EEG064': 'misc'})
        raw.rename_channels({'EEG061': 'EOG061', 'EEG062': 'EOG062',
                             'EEG063': 'ECG063', 'EEG064': 'MISC'})

        events = mne.find_events(raw, stim_channel='STI101',
                                 consecutive='increasing',
                                 min_duration=0.003, verbose=True)
        # Read epochs
        mne.io.set_eeg_reference(raw)

        epoch = mne.Epochs(raw, events, events_id, tmin, tmax, proj=True,
                           baseline=None,
                           preload=False, reject=None, decim=4)
        epochs.append(epoch)

        # Same `dev_head_t` for all runs so that we can concatenate them.
        epoch.info['dev_head_t'] = epochs[0].info['dev_head_t']


    epochs = mne.epochs.concatenate_epochs(epochs)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 1 - 40 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 0.75 Hz)
    - Upper passband edge: 40.00 Hz
    - Upper transition bandwidth: 10.00 Hz (-6 dB cutoff frequency: 45.00 Hz)
    - Filter length: 7261 samples (6.601 sec)

    296 events found
    Event IDs: [   5    6    7   13   14   15   17   18   19  261  262  263  269  271
      273  274  275 4096 4101 4102 4103 4109 4110 4111 4113 4114 4115]
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 1 - 40 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 0.75 Hz)
    - Upper passband edge: 40.00 Hz
    - Upper transition bandwidth: 10.00 Hz (-6 dB cutoff frequency: 45.00 Hz)
    - Filter length: 7261 samples (6.601 sec)

    296 events found
    Event IDs: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269
      271  273  274  275 4096 4101 4102 4103 4109 4110 4111 4113 4114 4115]
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 1 - 40 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 0.75 Hz)
    - Upper passband edge: 40.00 Hz
    - Upper transition bandwidth: 10.00 Hz (-6 dB cutoff frequency: 45.00 Hz)
    - Filter length: 7261 samples (6.601 sec)

    292 events found
    Event IDs: [   5    6    7   13   14   15   17   18   19  256  261  269  271  273
      274  275 4096 4101 4102 4103 4109 4110 4111 4113 4114 4115]
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 1 - 40 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 0.75 Hz)
    - Upper passband edge: 40.00 Hz
    - Upper transition bandwidth: 10.00 Hz (-6 dB cutoff frequency: 45.00 Hz)
    - Filter length: 7261 samples (6.601 sec)

    295 events found
    Event IDs: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269
      270  271  273  274  275 4096 4101 4102 4103 4109 4110 4111 4113 4114
     4115]




.. GENERATED FROM PYTHON SOURCE LINES 80-81

Now, we apply autoreject

.. GENERATED FROM PYTHON SOURCE LINES 81-89

.. code-block:: default


    from autoreject import AutoReject, compute_thresholds  # noqa

    this_epoch = epochs['famous']
    exclude = []  # XXX
    picks = mne.pick_types(epochs.info, meg=False, eeg=True, stim=False,
                           eog=False, exclude=exclude)








.. GENERATED FROM PYTHON SOURCE LINES 90-95

Note that :class:`autoreject.AutoReject` by design supports multiple
channels. If no picks are passed separate solutions will be computed for each
channel type and internally combines. This then readily supports cleaning
unseen epochs from the different channel types used during fit.
Here we only use a subset of channels to save time.

.. GENERATED FROM PYTHON SOURCE LINES 97-101

Also note that once the parameters are learned, any data can be repaired
that contains channels that were used during fit. This also means that time
may be saved by fitting :class:`autoreject.AutoReject` on a
representative subsample of the data.

.. GENERATED FROM PYTHON SOURCE LINES 101-106

.. code-block:: default


    ar = AutoReject(picks=picks, random_state=42, n_jobs=1, verbose=True)

    epochs_ar, reject_log = ar.fit_transform(this_epoch, return_log=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Running autoreject on ch_type=eeg




    Estimated consensus=1.00 and n_interpolate=32
    No bad epochs were found for your data. Returning a copy of the data you wanted to clean. Interpolation may have been done.




.. GENERATED FROM PYTHON SOURCE LINES 107-108

We can visualize the cross validation curve over two variables

.. GENERATED FROM PYTHON SOURCE LINES 108-134

.. code-block:: default


    import numpy as np  # noqa
    import matplotlib.pyplot as plt  # noqa
    import matplotlib.patches as patches  # noqa
    from autoreject import set_matplotlib_defaults  # noqa

    set_matplotlib_defaults(plt, style='seaborn-white')
    loss = ar.loss_['eeg'].mean(axis=-1)  # losses are stored by channel type.

    plt.matshow(loss.T * 1e6, cmap=plt.get_cmap('viridis'))
    plt.xticks(range(len(ar.consensus)), ['%.1f' % c for c in ar.consensus])
    plt.yticks(range(len(ar.n_interpolate)), ar.n_interpolate)

    # Draw rectangle at location of best parameters
    ax = plt.gca()
    idx, jdx = np.unravel_index(loss.argmin(), loss.shape)
    rect = patches.Rectangle((idx - 0.5, jdx - 0.5), 1, 1, linewidth=2,
                             edgecolor='r', facecolor='none')
    ax.add_patch(rect)
    ax.xaxis.set_ticks_position('bottom')
    plt.xlabel(r'Consensus percentage $\kappa$')
    plt.ylabel(r'Max sensors interpolated $\rho$')
    plt.title('Mean cross validation error (x 1e6)')
    plt.colorbar()
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_001.png
   :alt: Mean cross validation error (x 1e6)
   :srcset: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 135-138

... and visualize the bad epochs and sensors. Bad sensors which have been
interpolated are in blue. Bad sensors which are not interpolated are in red.
Bad trials are also in red.

.. GENERATED FROM PYTHON SOURCE LINES 138-142

.. code-block:: default


    scalings = dict(eeg=40e-6)
    reject_log.plot_epochs(this_epoch, scalings=scalings)




.. image-sg:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_002.png
   :alt: plot visualize bad epochs
   :srcset: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <MNEBrowseFigure size 1409.72x1140.28 with 4 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 143-144

... and the epochs after cleaning with autoreject

.. GENERATED FROM PYTHON SOURCE LINES 144-147

.. code-block:: default


    epochs_ar.plot(scalings=scalings)




.. image-sg:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_003.png
   :alt: plot visualize bad epochs
   :srcset: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <MNEBrowseFigure size 1409.72x1140.28 with 4 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 148-149

The epochs dropped by autoreject are also stored in epochs.drop_log

.. GENERATED FROM PYTHON SOURCE LINES 149-152

.. code-block:: default


    epochs_ar.plot_drop_log()




.. image-sg:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_004.png
   :alt: 0 of 197 epochs removed (0.0%)
   :srcset: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 153-157

Finally, the evoked before and after autoreject, for sanity check. We use
the ``spatial_colors`` argument from MNE as it allows us to see that
the eyeblinks have not yet been cleaned but the bad channels have been
repaired.

.. GENERATED FROM PYTHON SOURCE LINES 157-161

.. code-block:: default


    ylim = dict(eeg=(-15, 15))
    epochs.average().plot(ylim=ylim, spatial_colors=True)
    epochs_ar.average().plot(ylim=ylim, spatial_colors=True)



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_005.png
         :alt: EEG (70 channels)
         :srcset: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_006.png
         :alt: EEG (70 channels)
         :srcset: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x300 with 2 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  28.494 seconds)


.. _sphx_glr_download_auto_examples_plot_visualize_bad_epochs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_visualize_bad_epochs.py <plot_visualize_bad_epochs.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_visualize_bad_epochs.ipynb <plot_visualize_bad_epochs.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
