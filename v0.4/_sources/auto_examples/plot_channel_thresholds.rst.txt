
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_channel_thresholds.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_channel_thresholds.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_channel_thresholds.py:


=============================
Plot channel-level thresholds
=============================

This example demonstrates how to use :mod:`autoreject` to find
channel-wise thresholds.

.. GENERATED FROM PYTHON SOURCE LINES 9-13

.. code-block:: default


    # Author: Mainak Jas <mainak.jas@telecom-paristech.fr>
    # License: BSD-3-Clause








.. GENERATED FROM PYTHON SOURCE LINES 14-15

Let us first load the `raw` data using :func:`mne.io.read_raw_fif`.

.. GENERATED FROM PYTHON SOURCE LINES 15-25

.. code-block:: default


    import mne
    from mne import io
    from mne.datasets import sample

    data_path = sample.data_path()
    meg_path = data_path / 'MEG' / 'sample'
    raw_fname = meg_path / 'sample_audvis_filt-0-40_raw.fif'
    raw = io.read_raw_fif(raw_fname, preload=True)








.. GENERATED FROM PYTHON SOURCE LINES 26-27

We can extract the events (or triggers) for epoching our signal.

.. GENERATED FROM PYTHON SOURCE LINES 27-33

.. code-block:: default


    event_fname = meg_path / 'sample_audvis_filt-0-40_raw-eve.fif'
    event_id = {'Auditory/Left': 1}
    tmin, tmax = -0.2, 0.5
    events = mne.read_events(event_fname)








.. GENERATED FROM PYTHON SOURCE LINES 34-36

Now that we have the events, we can extract the trials for the selection
of channels defined by ``picks``.

.. GENERATED FROM PYTHON SOURCE LINES 36-45

.. code-block:: default


    epochs = mne.Epochs(raw, events, event_id, tmin, tmax,
                        baseline=(None, 0),
                        reject=None, verbose=False, preload=True)

    picks = mne.pick_types(epochs.info, meg='grad', eeg=False, stim=False,
                           eog=False, exclude='bads')









.. GENERATED FROM PYTHON SOURCE LINES 46-49

Now, we compute the channel-level thresholds using
:func:`autoreject.compute_thresholds`. The `method` parameter will determine
how we will search for thresholds over a range of potential candidates.

.. GENERATED FROM PYTHON SOURCE LINES 49-58

.. code-block:: default


    import numpy as np  # noqa
    from autoreject import compute_thresholds  # noqa

    # Get a dictionary of rejection thresholds
    threshes = compute_thresholds(epochs, picks=picks, method='random_search',
                                  random_state=42, augment=False,
                                  verbose=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/larsoner/python/autoreject/autoreject/utils.py:65: UserWarning: 2 channels are marked as bad. These will be ignored. If you want them to be considered by autoreject please remove them from epochs.info["bads"].
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 59-61

Finally, let us plot a histogram of the channel-level thresholds to verify
that the thresholds are indeed different for different sensors.

.. GENERATED FROM PYTHON SOURCE LINES 61-80

.. code-block:: default


    import matplotlib.pyplot as plt  # noqa
    from autoreject import set_matplotlib_defaults  # noqa
    set_matplotlib_defaults(plt)

    unit = r'fT/cm'
    scaling = 1e13

    plt.figure(figsize=(6, 5))
    plt.tick_params(axis='x', which='both', bottom='off', top='off')
    plt.tick_params(axis='y', which='both', left='off', right='off')

    plt.hist(scaling * np.array(list(threshes.values())), 30,
             color='g', alpha=0.4)
    plt.xlabel('Threshold (%s)' % unit)
    plt.ylabel('Number of sensors')
    plt.xlim((100, 950))
    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_channel_thresholds_001.png
   :alt: plot channel thresholds
   :srcset: /auto_examples/images/sphx_glr_plot_channel_thresholds_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.618 seconds)


.. _sphx_glr_download_auto_examples_plot_channel_thresholds.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_channel_thresholds.py <plot_channel_thresholds.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_channel_thresholds.ipynb <plot_channel_thresholds.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
