

.. _sphx_glr_auto_examples_plot_channel_thresholds.py:


=============================
Plot channel-level thresholds
=============================

This example demonstrates how to use :mod:`autoreject` to find
channel-wise thresholds.



.. code-block:: python


    # Author: Mainak Jas <mainak.jas@telecom-paristech.fr>
    # License: BSD (3-clause)







Let us first load the `raw` data using :func:`mne.io.read_raw_fif`.



.. code-block:: python


    import mne
    from mne import io
    from mne.datasets import sample

    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'
    raw = io.read_raw_fif(raw_fname, preload=True)





.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/mainak/Desktop/projects/github_repos/mne-python/examples/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
            Average EEG reference (1 x 60)  idle
        Range : 6450 ... 48149 =     42.956 ...   320.665 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 41699  =      0.000 ...   277.709 secs...


We can extract the events (or triggers) for epoching our signal.



.. code-block:: python


    event_fname = data_path + ('/MEG/sample/sample_audvis_filt-0-40_raw-'
                               'eve.fif')
    event_id = {'Auditory/Left': 1}
    tmin, tmax = -0.2, 0.5
    events = mne.read_events(event_fname)







Now that we have the events, we can extract the trials for the selection
of channels defined by ``picks``.



.. code-block:: python


    epochs = mne.Epochs(raw, events, event_id, tmin, tmax,
                        baseline=(None, 0),
                        reject=None, verbose=False, preload=True)

    picks = mne.pick_types(epochs.info, meg='grad', eeg=False, stim=False,
                           eog=False, exclude='bads')








Now, we can define a threshold range over which the threshold must be found
and then compute the channel-level thresholds using
:func:`autoreject.compute_thresholds`.



.. code-block:: python


    import numpy as np  # noqa
    from autoreject import compute_thresholds  # noqa

    threshes = compute_thresholds(epochs, picks=picks, method='random_search',
                                  random_state=42, augment=False,
                                  verbose='progressbar')





.. rst-class:: sphx-glr-script-out

 Out::

    Computing thresholds ...
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.3s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   4 out of   4 | elapsed:    1.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   5 out of   5 | elapsed:    1.3s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   6 out of   6 | elapsed:    1.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   7 out of   7 | elapsed:    1.7s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   8 out of   8 | elapsed:    2.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   9 out of   9 | elapsed:    2.3s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  10 out of  10 | elapsed:    2.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  11 out of  11 | elapsed:    2.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  12 out of  12 | elapsed:    3.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  13 out of  13 | elapsed:    3.3s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  14 out of  14 | elapsed:    3.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  15 out of  15 | elapsed:    3.7s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  16 out of  16 | elapsed:    4.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  17 out of  17 | elapsed:    4.2s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  18 out of  18 | elapsed:    4.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  19 out of  19 | elapsed:    4.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  20 out of  20 | elapsed:    5.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  21 out of  21 | elapsed:    5.3s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  22 out of  22 | elapsed:    5.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  23 out of  23 | elapsed:    5.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  24 out of  24 | elapsed:    6.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  25 out of  25 | elapsed:    6.2s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  26 out of  26 | elapsed:    6.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  27 out of  27 | elapsed:    6.7s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  28 out of  28 | elapsed:    7.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  29 out of  29 | elapsed:    7.2s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  30 out of  30 | elapsed:    7.4s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  31 out of  31 | elapsed:    7.7s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  32 out of  32 | elapsed:    7.9s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  33 out of  33 | elapsed:    8.2s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  34 out of  34 | elapsed:    8.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  35 out of  35 | elapsed:    8.7s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  36 out of  36 | elapsed:    9.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  37 out of  37 | elapsed:    9.3s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  38 out of  38 | elapsed:    9.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  39 out of  39 | elapsed:    9.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  40 out of  40 | elapsed:   10.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  41 out of  41 | elapsed:   10.3s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  42 out of  42 | elapsed:   10.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  43 out of  43 | elapsed:   10.9s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  44 out of  44 | elapsed:   11.1s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  45 out of  45 | elapsed:   11.3s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  46 out of  46 | elapsed:   11.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  47 out of  47 | elapsed:   11.9s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  48 out of  48 | elapsed:   12.1s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  49 out of  49 | elapsed:   12.3s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  50 out of  50 | elapsed:   12.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done 203 out of 203 | elapsed:   50.9s finished


Finally, let us plot a histogram of the channel-level thresholds to verify
that the thresholds are indeed different for different sensors.



.. code-block:: python


    import matplotlib.pyplot as plt  # noqa
    from autoreject import set_matplotlib_defaults  # noqa
    set_matplotlib_defaults(plt)

    unit = r'fT/cm'
    scaling = 1e13

    plt.figure(figsize=(6, 5))
    plt.tick_params(axis='x', which='both', bottom='off', top='off')
    plt.tick_params(axis='y', which='both', left='off', right='off')

    plt.hist(scaling * np.array(list(threshes.values())), 30,
             color='g', alpha=0.4)
    plt.xlabel('Threshold (%s)' % unit)
    plt.ylabel('Number of sensors')
    plt.xlim((100, 950))
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_channel_thresholds_001.png
    :align: center




**Total running time of the script:** ( 0 minutes  51.538 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_channel_thresholds.py <plot_channel_thresholds.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_channel_thresholds.ipynb <plot_channel_thresholds.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
