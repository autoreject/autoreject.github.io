.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_visualize_bad_epochs.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_visualize_bad_epochs.py:


===============================
Visualize bad sensors per trial
===============================

This example demonstrates how to use :mod:`autoreject` to
visualize the bad sensors in each trial


.. code-block:: default


    # Author: Mainak Jas <mainak.jas@telecom-paristech.fr>
    #         Denis A. Engemann <denis.engemann@gmail.com>
    # License: BSD (3-clause)

    # sphinx_gallery_thumbnail_number = 2







First, we download the data from OpenfMRI. We will download the tarfile,
extract the necessary files and delete the tar from the disk


.. code-block:: default


    import os
    import tarfile

    import autoreject
    from autoreject.utils import fetch_file

    subject_id = 16  # OpenfMRI format of subject numbering

    src_url = ('http://openfmri.s3.amazonaws.com/tarballs/'
               'ds117_R0.1.1_sub016_raw.tgz')
    subject = "sub%03d" % subject_id

    print("processing subject: %s" % subject)
    base_path = os.path.join(
        os.path.dirname(autoreject.__file__), '..', 'examples')
    target = os.path.join(base_path, 'ds117_R0.1.1_sub016_raw.tgz')
    if not os.path.exists(os.path.join(base_path, 'ds117')):
        if not os.path.exists(target):
            fetch_file(src_url, target)
        tf = tarfile.open(target)
        print('Extracting files. This may take a while ...')
        tf.extractall(path=base_path, members=tf.getmembers()[-25:-9:3])
        os.remove(target)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    processing subject: sub016


We will create epochs with data starting 200 ms before trigger onset
and continuing up to 800 ms after that. The data contains visual stimuli for
famous faces, unfamiliar faces, as well as scrambled faces.


.. code-block:: default


    tmin, tmax = -0.2, 0.8
    events_id = {'famous/first': 5, 'famous/immediate': 6, 'famous/long': 7}







Let us now load all the epochs into memory and concatenate them


.. code-block:: default


    import mne  # noqa

    epochs = list()
    for run in range(3, 7):
        run_fname = os.path.join(base_path, 'ds117', 'sub%03d' % subject_id, 'MEG',
                                 'run_%02d_raw.fif' % run)
        raw = mne.io.read_raw_fif(run_fname, preload=True)
        raw.pick_types(eeg=True, meg=False, stim=True)  # less memory + computation
        raw.filter(1., 40., l_trans_bandwidth=0.5, n_jobs=1, verbose='INFO')

        raw.set_channel_types({'EEG061': 'eog', 'EEG062': 'eog',
                               'EEG063': 'ecg', 'EEG064': 'misc'})
        raw.rename_channels({'EEG061': 'EOG061', 'EEG062': 'EOG062',
                             'EEG063': 'ECG063', 'EEG064': 'MISC'})

        events = mne.find_events(raw, stim_channel='STI101',
                                 consecutive='increasing',
                                 min_duration=0.003, verbose=True)
        # Read epochs
        mne.io.set_eeg_reference(raw)

        epoch = mne.Epochs(raw, events, events_id, tmin, tmax, proj=True,
                           baseline=None,
                           preload=False, reject=None, decim=4)
        epochs.append(epoch)

        # Same `dev_head_t` for all runs so that we can concatenate them.
        epoch.info['dev_head_t'] = epochs[0].info['dev_head_t']


    epochs = mne.epochs.concatenate_epochs(epochs)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/autoreject/../examples/ds117/sub016/MEG/run_03_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 60500 ... 598399 =     55.000 ...   543.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 537899  =      0.000 ...   488.999 secs...
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 1 - 40 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 0.75 Hz)
    - Upper passband edge: 40.00 Hz
    - Upper transition bandwidth: 10.00 Hz (-6 dB cutoff frequency: 45.00 Hz)
    - Filter length: 7261 samples (6.601 sec)

    294 events found
    Event IDs: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269
      270  273  274  275 4096 4101 4102 4103 4109 4110 4111 4113 4114 4115]
    Applying average reference.
    Applying a custom EEG reference.
    49 matching events found
    No baseline correction applied
    Not setting metadata
    8 projection items activated
    Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/autoreject/../examples/ds117/sub016/MEG/run_04_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 137500 ... 680899 =    125.000 ...   618.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 543399  =      0.000 ...   493.999 secs...
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 1 - 40 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 0.75 Hz)
    - Upper passband edge: 40.00 Hz
    - Upper transition bandwidth: 10.00 Hz (-6 dB cutoff frequency: 45.00 Hz)
    - Filter length: 7261 samples (6.601 sec)

    296 events found
    Event IDs: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269
      270  273  274  275 4096 4101 4102 4103 4109 4110 4111 4113]
    Applying average reference.
    Applying a custom EEG reference.
    49 matching events found
    No baseline correction applied
    Not setting metadata
    8 projection items activated
    Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/autoreject/../examples/ds117/sub016/MEG/run_05_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 279400 ... 820599 =    254.000 ...   745.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 541199  =      0.000 ...   491.999 secs...
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 1 - 40 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 0.75 Hz)
    - Upper passband edge: 40.00 Hz
    - Upper transition bandwidth: 10.00 Hz (-6 dB cutoff frequency: 45.00 Hz)
    - Filter length: 7261 samples (6.601 sec)

    295 events found
    Event IDs: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269
      270  271  273  274  275 4096 4101 4102 4103 4109 4110 4111 4115 4357
     4359]
    Applying average reference.
    Applying a custom EEG reference.
    47 matching events found
    No baseline correction applied
    Not setting metadata
    8 projection items activated
    Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/autoreject/../examples/ds117/sub016/MEG/run_06_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 140800 ... 680899 =    128.000 ...   618.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 540099  =      0.000 ...   490.999 secs...
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 1 - 40 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 0.75 Hz)
    - Upper passband edge: 40.00 Hz
    - Upper transition bandwidth: 10.00 Hz (-6 dB cutoff frequency: 45.00 Hz)
    - Filter length: 7261 samples (6.601 sec)

    296 events found
    Event IDs: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269
      270  271  273  274  275 4096 4101 4102 4103 4109 4110 4111 4114]
    Applying average reference.
    Applying a custom EEG reference.
    48 matching events found
    No baseline correction applied
    Not setting metadata
    8 projection items activated
    Loading data for 49 events and 1101 original time points ...
    0 bad epochs dropped
    Loading data for 49 events and 1101 original time points ...
    0 bad epochs dropped
    Loading data for 47 events and 1101 original time points ...
    0 bad epochs dropped
    Loading data for 48 events and 1101 original time points ...
    0 bad epochs dropped
    193 matching events found
    No baseline correction applied
    Not setting metadata
    0 bad epochs dropped


Now, we apply autoreject


.. code-block:: default


    from autoreject import AutoReject, compute_thresholds  # noqa

    this_epoch = epochs['famous']
    exclude = []  # XXX
    picks = mne.pick_types(epochs.info, meg=False, eeg=True, stim=False,
                           eog=False, exclude=exclude)







Note that :class:`autoreject.AutoReject` by design supports multiple
channels. If no picks are passed separate solutions will be computed for each
channel type and internally combines. This then readily supports cleaning
unseen epochs from the different channel types used during fit.
Here we only use a subset of channels to save time.

Also note that once the parameters are learned, any data can be repaired
that contains channels that were used during fit. This also means that time
may be saved by fitting :class:`autoreject.AutoReject` on a
representative subsample of the data.


.. code-block:: default


    ar = AutoReject(picks=picks, random_state=42, n_jobs=1, verbose='tqdm')

    epochs_ar, reject_log = ar.fit_transform(this_epoch, return_log=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running autoreject on ch_type=eeg




    Estimated consensus=0.10 and n_interpolate=4
    Dropped 55 epochs


We can visualize the cross validation curve over two variables


.. code-block:: default


    import numpy as np  # noqa
    import matplotlib.pyplot as plt  # noqa
    import matplotlib.patches as patches  # noqa
    from autoreject import set_matplotlib_defaults  # noqa

    set_matplotlib_defaults(plt, style='seaborn-white')
    loss = ar.loss_['eeg'].mean(axis=-1)  # losses are stored by channel type.

    plt.matshow(loss.T * 1e6, cmap=plt.get_cmap('viridis'))
    plt.xticks(range(len(ar.consensus)), ['%.1f' % c for c in ar.consensus])
    plt.yticks(range(len(ar.n_interpolate)), ar.n_interpolate)

    # Draw rectangle at location of best parameters
    ax = plt.gca()
    idx, jdx = np.unravel_index(loss.argmin(), loss.shape)
    rect = patches.Rectangle((idx - 0.5, jdx - 0.5), 1, 1, linewidth=2,
                             edgecolor='r', facecolor='none')
    ax.add_patch(rect)
    ax.xaxis.set_ticks_position('bottom')
    plt.xlabel(r'Consensus percentage $\kappa$')
    plt.ylabel(r'Max sensors interpolated $\rho$')
    plt.title('Mean cross validation error (x 1e6)')
    plt.colorbar()
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_001.png
    :class: sphx-glr-single-img




... and visualize the bad epochs and sensors. Bad sensors which have been
interpolated are in blue. Bad sensors which are not interpolated are in red.
Bad trials are also in red.


.. code-block:: default


    scalings = dict(eeg=40e-6)
    reject_log.plot_epochs(this_epoch, scalings=scalings)




.. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_002.png
    :class: sphx-glr-single-img




... and the epochs after cleaning with autoreject


.. code-block:: default


    epochs_ar.plot(scalings=scalings)




.. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_003.png
    :class: sphx-glr-single-img




The epochs dropped by autoreject are also stored in epochs.drop_log


.. code-block:: default


    epochs_ar.plot_drop_log()




.. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_004.png
    :class: sphx-glr-single-img




Finally, the evoked before and after autoreject, for sanity check. We use
the ``spatial_colors`` argument from MNE as it allows us to see that
the eyeblinks have not yet been cleaned but the bad channels have been
repaired.


.. code-block:: default


    ylim = dict(eeg=(-15, 15))
    epochs.average().plot(ylim=ylim, spatial_colors=True)
    epochs_ar.average().plot(ylim=ylim, spatial_colors=True)



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_005.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_006.png
            :class: sphx-glr-multi-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  8.151 seconds)


.. _sphx_glr_download_auto_examples_plot_visualize_bad_epochs.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_visualize_bad_epochs.py <plot_visualize_bad_epochs.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_visualize_bad_epochs.ipynb <plot_visualize_bad_epochs.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
