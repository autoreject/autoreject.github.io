

.. _sphx_glr_auto_examples_plot_visualize_bad_epochs.py:


===============================
Visualize bad sensors per trial
===============================

This example demonstrates how to use :mod:`autoreject` to
visualize the bad sensors in each trial



.. code-block:: python


    # Author: Mainak Jas <mainak.jas@telecom-paristech.fr>
    #         Denis A. Engemann <denis.engemann@gmail.com>
    # License: BSD (3-clause)







First, we download the data from OpenfMRI. We will download the tarfile,
extract the necessary files and delete the tar from the disk



.. code-block:: python


    import os
    import tarfile

    import autoreject
    from autoreject.utils import fetch_file

    subject_id = 16  # OpenfMRI format of subject numbering

    src_url = ('http://openfmri.s3.amazonaws.com/tarballs/'
               'ds117_R0.1.1_sub016_raw.tgz')
    subject = "sub%03d" % subject_id

    print("processing subject: %s" % subject)
    base_path = os.path.join(
        os.path.dirname(autoreject.__file__), '..', 'examples')
    target = os.path.join(base_path, 'ds117_R0.1.1_sub016_raw.tgz')
    if not os.path.exists(os.path.join(base_path, 'ds117')):
        if not os.path.exists(target):
            fetch_file(src_url, target)
        tf = tarfile.open(target)
        print('Extracting files. This may take a while ...')
        tf.extractall(path=base_path, members=tf.getmembers()[-25:-9:3])
        os.remove(target)





.. rst-class:: sphx-glr-script-out

 Out::

    processing subject: sub016


We will create epochs with data starting 200 ms before trigger onset
and continuing up to 800 ms after that. The data contains visual stimuli for
famous faces, unfamiliar faces, as well as scrambled faces.



.. code-block:: python


    tmin, tmax = -0.2, 0.8
    events_id = {'famous/first': 5, 'famous/immediate': 6, 'famous/long': 7}







Let us now load all the epochs into memory and concatenate them



.. code-block:: python


    import mne  # noqa

    epochs = list()
    for run in range(3, 7):
        run_fname = os.path.join(base_path, 'ds117', 'sub%03d' % subject_id, 'MEG',
                                 'run_%02d_raw.fif' % run)
        raw = mne.io.read_raw_fif(run_fname, preload=True)
        raw.pick_types(eeg=True, meg=False, stim=True)  # less memory + computation
        raw.filter(1., 40., l_trans_bandwidth=0.5, n_jobs=1, verbose='INFO')

        raw.set_channel_types({'EEG061': 'eog', 'EEG062': 'eog',
                               'EEG063': 'ecg', 'EEG064': 'misc'})
        raw.rename_channels({'EEG061': 'EOG061', 'EEG062': 'EOG062',
                             'EEG063': 'ECG063', 'EEG064': 'MISC'})

        events = mne.find_events(raw, stim_channel='STI101',
                                 consecutive='increasing',
                                 min_duration=0.003, verbose=True)
        # Read epochs
        mne.io.set_eeg_reference(raw)

        epoch = mne.Epochs(raw, events, events_id, tmin, tmax, proj=True,
                           baseline=None,
                           preload=False, reject=None, decim=4)
        epochs.append(epoch)

        # Same `dev_head_t` for all runs so that we can concatenate them.
        epoch.info['dev_head_t'] = epochs[0].info['dev_head_t']


    epochs = mne.epochs.concatenate_epochs(epochs)




.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/examples/ds117/sub016/MEG/run_03_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 60500 ... 598399 =     55.000 ...   543.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 537899  =      0.000 ...   488.999 secs...
    Setting up band-pass filter from 1 - 40 Hz
    fir_design defaults to "firwin2" in 0.15 but will change to "firwin" in 0.16, set it explicitly to avoid this warning.
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 14520 samples (13.200 sec) selected
    294 events found
    Events id: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269  270
      273  274  275 4096 4101 4102 4103 4109 4110 4111 4113 4114 4115]
    The behavior of set_eeg_reference will change in 0.16 when ref_channels="average". Currently, a projection is computed, which has to be applied manually with the apply_proj method. In 0.16, the average reference will be directly applied. Set projection=True if you want to retain the old behavior, or set projection=False if you want the new behavior.
    Adding average EEG reference projection.
    1 projection items deactivated
    Average reference projection was added, but has not been applied yet. Use the apply_proj method to apply it.
    49 matching events found
    Created an SSP operator (subspace dimension = 1)
    9 projection items activated
    Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/examples/ds117/sub016/MEG/run_04_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 137500 ... 680899 =    125.000 ...   618.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 543399  =      0.000 ...   493.999 secs...
    Setting up band-pass filter from 1 - 40 Hz
    fir_design defaults to "firwin2" in 0.15 but will change to "firwin" in 0.16, set it explicitly to avoid this warning.
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 14520 samples (13.200 sec) selected
    296 events found
    Events id: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269  270
      273  274  275 4096 4101 4102 4103 4109 4110 4111 4113]
    The behavior of set_eeg_reference will change in 0.16 when ref_channels="average". Currently, a projection is computed, which has to be applied manually with the apply_proj method. In 0.16, the average reference will be directly applied. Set projection=True if you want to retain the old behavior, or set projection=False if you want the new behavior.
    Adding average EEG reference projection.
    1 projection items deactivated
    Average reference projection was added, but has not been applied yet. Use the apply_proj method to apply it.
    49 matching events found
    Created an SSP operator (subspace dimension = 1)
    9 projection items activated
    Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/examples/ds117/sub016/MEG/run_05_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 279400 ... 820599 =    254.000 ...   745.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 541199  =      0.000 ...   491.999 secs...
    Setting up band-pass filter from 1 - 40 Hz
    fir_design defaults to "firwin2" in 0.15 but will change to "firwin" in 0.16, set it explicitly to avoid this warning.
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 14520 samples (13.200 sec) selected
    295 events found
    Events id: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269  270
      271  273  274  275 4096 4101 4102 4103 4109 4110 4111 4115 4357 4359]
    The behavior of set_eeg_reference will change in 0.16 when ref_channels="average". Currently, a projection is computed, which has to be applied manually with the apply_proj method. In 0.16, the average reference will be directly applied. Set projection=True if you want to retain the old behavior, or set projection=False if you want the new behavior.
    Adding average EEG reference projection.
    1 projection items deactivated
    Average reference projection was added, but has not been applied yet. Use the apply_proj method to apply it.
    47 matching events found
    Created an SSP operator (subspace dimension = 1)
    9 projection items activated
    Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/examples/ds117/sub016/MEG/run_06_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 140800 ... 680899 =    128.000 ...   618.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 540099  =      0.000 ...   490.999 secs...
    Setting up band-pass filter from 1 - 40 Hz
    fir_design defaults to "firwin2" in 0.15 but will change to "firwin" in 0.16, set it explicitly to avoid this warning.
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 14520 samples (13.200 sec) selected
    296 events found
    Events id: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269  270
      271  273  274  275 4096 4101 4102 4103 4109 4110 4111 4114]
    The behavior of set_eeg_reference will change in 0.16 when ref_channels="average". Currently, a projection is computed, which has to be applied manually with the apply_proj method. In 0.16, the average reference will be directly applied. Set projection=True if you want to retain the old behavior, or set projection=False if you want the new behavior.
    Adding average EEG reference projection.
    1 projection items deactivated
    Average reference projection was added, but has not been applied yet. Use the apply_proj method to apply it.
    48 matching events found
    Created an SSP operator (subspace dimension = 1)
    9 projection items activated
    Loading data for 49 events and 1101 original time points ...
    0 bad epochs dropped
    Loading data for 49 events and 1101 original time points ...
    0 bad epochs dropped
    Loading data for 47 events and 1101 original time points ...
    0 bad epochs dropped
    Loading data for 48 events and 1101 original time points ...
    0 bad epochs dropped
    193 matching events found
    Created an SSP operator (subspace dimension = 1)
    0 bad epochs dropped


Now, we apply autoreject



.. code-block:: python


    from autoreject import LocalAutoRejectCV, compute_thresholds  # noqa
    from functools import partial  # noqa

    this_epoch = epochs['famous']
    exclude = []  # XXX
    picks = mne.pick_types(epochs.info, meg=False, eeg=True, stim=False,
                           eog=False, exclude=exclude)

    thresh_func = partial(compute_thresholds, random_state=42, n_jobs=1)







Note that :class:`autoreject.LocalAutoRejectCV` by design supports multiple
channels. If no picks are passed separate solutions will be computed for each
channel type and internally combines. This then readily supports cleaning
unseen epochs from the different channel types used during fit.
Here we only use a subset of channels to save time.


Also note that once the parameters are learned, any data can be repaired
that contains channels that were used during fit. This also means that time
may be saved by fitting :class:`autoreject.LocalAutoRejectCV` on a
representative subsample of the data.



.. code-block:: python



    ar = LocalAutoRejectCV(thresh_func=thresh_func, verbose='tqdm', picks=picks)

    ar.fit(this_epoch)
    epochs_ar = ar.transform(this_epoch)





.. rst-class:: sphx-glr-script-out

 Out::

    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    1.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    2.9s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   4 out of   4 | elapsed:    3.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   5 out of   5 | elapsed:    4.9s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   6 out of   6 | elapsed:    6.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   7 out of   7 | elapsed:    7.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   8 out of   8 | elapsed:    8.1s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   9 out of   9 | elapsed:    9.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  10 out of  10 | elapsed:   10.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  11 out of  11 | elapsed:   10.9s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  12 out of  12 | elapsed:   11.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  13 out of  13 | elapsed:   12.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  14 out of  14 | elapsed:   13.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  15 out of  15 | elapsed:   14.9s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  16 out of  16 | elapsed:   15.9s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  17 out of  17 | elapsed:   16.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  18 out of  18 | elapsed:   17.9s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  19 out of  19 | elapsed:   18.8s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  20 out of  20 | elapsed:   19.7s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  21 out of  21 | elapsed:   20.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  22 out of  22 | elapsed:   21.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  23 out of  23 | elapsed:   22.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  24 out of  24 | elapsed:   23.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  25 out of  25 | elapsed:   24.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  26 out of  26 | elapsed:   25.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  27 out of  27 | elapsed:   26.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  28 out of  28 | elapsed:   27.4s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  29 out of  29 | elapsed:   28.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  30 out of  30 | elapsed:   29.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  31 out of  31 | elapsed:   30.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  32 out of  32 | elapsed:   31.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  33 out of  33 | elapsed:   32.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  34 out of  34 | elapsed:   33.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  35 out of  35 | elapsed:   34.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  36 out of  36 | elapsed:   35.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  37 out of  37 | elapsed:   36.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  38 out of  38 | elapsed:   37.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  39 out of  39 | elapsed:   38.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  40 out of  40 | elapsed:   39.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  41 out of  41 | elapsed:   40.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  42 out of  42 | elapsed:   41.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  43 out of  43 | elapsed:   42.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  44 out of  44 | elapsed:   43.5s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  45 out of  45 | elapsed:   44.3s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  46 out of  46 | elapsed:   45.3s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  47 out of  47 | elapsed:   46.1s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  48 out of  48 | elapsed:   47.1s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  49 out of  49 | elapsed:   48.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  50 out of  50 | elapsed:   49.1s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  70 out of  70 | elapsed:  1.2min finished
    Estimated consensus_perc=0.50 and n_interpolate=32


We can visualize the cross validation curve over two variables



.. code-block:: python


    import numpy as np  # noqa
    import matplotlib.pyplot as plt  # noqa
    import matplotlib.patches as patches  # noqa
    from autoreject import set_matplotlib_defaults  # noqa

    set_matplotlib_defaults(plt, style='seaborn-white')
    loss = ar.loss_['eeg'].mean(axis=-1)  # losses are stored by channel type.

    plt.matshow(loss.T * 1e6, cmap=plt.get_cmap('viridis'))
    plt.xticks(range(len(ar.consensus_percs)), ar.consensus_percs)
    plt.yticks(range(len(ar.n_interpolates)), ar.n_interpolates)

    # Draw rectangle at location of best parameters
    ax = plt.gca()
    idx, jdx = np.unravel_index(loss.argmin(), loss.shape)
    rect = patches.Rectangle((idx - 0.5, jdx - 0.5), 1, 1, linewidth=2,
                             edgecolor='r', facecolor='none')
    ax.add_patch(rect)
    ax.xaxis.set_ticks_position('bottom')
    plt.xlabel(r'Consensus percentage $\kappa$')
    plt.ylabel(r'Max sensors interpolated $\rho$')
    plt.title('Mean cross validation error (x 1e6)')
    plt.colorbar()
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_001.png
    :align: center




... and visualize the bad epochs and sensors. Bad sensors which have been
interpolated are in blue. Bad sensors which are not interpolated are in red.
Bad trials are also in red.



.. code-block:: python


    from autoreject import plot_epochs  # noqa
    plot_epochs(this_epoch, bad_epochs_idx=ar.bad_epochs_idx,
                fix_log=ar.fix_log, scalings=dict(eeg=40e-6),
                title='')




.. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_002.png
    :align: center




... and the epochs after cleaning with autoreject



.. code-block:: python


    epochs_ar.plot(scalings=dict(eeg=40e-6))





.. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_003.png
    :align: center




The epochs dropped by autoreject are also stored in epochs.drop_log



.. code-block:: python


    epochs_ar.plot_drop_log()




.. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_004.png
    :align: center




Finally, the evoked before and after autoreject, for sanity check. We use
the ``spatial_colors`` argument from MNE as it allows us to see that
the eyeblinks have not yet been cleaned but the bad channels have been
repaired.



.. code-block:: python


    ylim = dict(eeg=(-15, 15))
    epochs.average().plot(ylim=ylim, spatial_colors=True)
    epochs_ar.average().plot(ylim=ylim, spatial_colors=True)



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_005.png
            :scale: 47

    *

      .. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_006.png
            :scale: 47




**Total running time of the script:** ( 3 minutes  10.493 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_visualize_bad_epochs.py <plot_visualize_bad_epochs.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_visualize_bad_epochs.ipynb <plot_visualize_bad_epochs.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
