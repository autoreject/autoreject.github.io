

.. _sphx_glr_auto_examples_plot_visualize_bad_epochs.py:


===============================
Visualize bad sensors per trial
===============================

This example demonstrates how to use :mod:`autoreject` to
visualize the bad sensors in each trial


.. code-block:: python


    # Author: Mainak Jas <mainak.jas@telecom-paristech.fr>
    # License: BSD (3-clause)







First, we download the data from OpenfMRI. We will download the tarfile,
extract the necessary files and delete the tar from the disk


.. code-block:: python


    import os
    import tarfile

    import autoreject
    from autoreject.utils import fetch_file

    subject_id = 16  # OpenfMRI format of subject numbering

    src_url = ('http://openfmri.s3.amazonaws.com/tarballs/'
               'ds117_R0.1.1_sub016_raw.tgz')
    subject = "sub%03d" % subject_id

    print("processing subject: %s" % subject)
    base_path = os.path.join(os.path.dirname(autoreject.__file__), '..', 'examples')
    target = os.path.join(base_path, 'ds117_R0.1.1_sub016_raw.tgz')
    if not os.path.exists(os.path.join(base_path, 'ds117')):
        if not os.path.exists(target):
            fetch_file(src_url, target)
        tf = tarfile.open(target)
        print('Extracting files. This may take a while ...')
        tf.extractall(path=base_path, members=tf.getmembers()[-25:-9:3])
        os.remove(target)





.. rst-class:: sphx-glr-script-out

 Out::

      processing subject: sub016


We will create epochs with data starting 200 ms before trigger onset
and continuing up to 800 ms after that. The data contains visual stimuli for
famous faces, unfamiliar faces, as well as scrambled faces.


.. code-block:: python


    tmin, tmax = -0.2, 0.8
    events_id = {'famous/first': 5, 'famous/immediate': 6, 'famous/long': 7}







Let us now load all the epochs into memory and concatenate them


.. code-block:: python

    import mne

    epochs = list()
    for run in range(3, 7):
        run_fname = os.path.join(base_path, 'ds117', 'sub%03d' % subject_id, 'MEG',
                                 'run_%02d_raw.fif' % run)
        raw = mne.io.read_raw_fif(run_fname, preload=True, add_eeg_ref=False)
        mne.io.set_eeg_reference(raw, [])
        raw.pick_types(eeg=True, meg=False, stim=True)  # less memory + computation
        raw.filter(1, 40, l_trans_bandwidth=0.5, n_jobs=1, verbose='INFO')

        raw.set_channel_types({'EEG061': 'eog', 'EEG062': 'eog',
                               'EEG063': 'ecg', 'EEG064': 'misc'})
        raw.rename_channels({'EEG061': 'EOG061', 'EEG062': 'EOG062',
                             'EEG063': 'ECG063', 'EEG064': 'MISC'})

        exclude = []  # XXX
        picks = mne.pick_types(raw.info, meg=False, eeg=True, stim=False,
                               eog=False, exclude=exclude)
        events = mne.find_events(raw, stim_channel='STI101',
                                 consecutive='increasing',
                                 min_duration=0.003, verbose=True)
        # Read epochs
        epoch = mne.Epochs(raw, events, events_id, tmin, tmax, proj=True,
                           add_eeg_ref=True, picks=picks, baseline=None,
                           preload=False, reject=None, decim=4)
        epochs.append(epoch)

        # Same `dev_head_t` for all runs so that we can concatenate them.
        epoch.info['dev_head_t'] = epochs[0].info['dev_head_t']
    epochs = mne.epochs.concatenate_epochs(epochs)





.. rst-class:: sphx-glr-script-out

 Out::

      Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/examples/ds117/sub016/MEG/run_03_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 60500 ... 598399 =     55.000 ...   543.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 537899  =      0.000 ...   488.999 secs...
    Applying a custom EEG reference.
    Setting up band-pass filter from 1 - 40 Hz
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 14520 samples (13.200 sec) selected
    294 events found
    Events id: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269  270
      273  274  275 4096 4101 4102 4103 4109 4110 4111 4113 4114 4115]
    49 matching events found
    add_eeg_ref will be removed in 0.15, use set_eeg_reference() instead
    Adding average EEG reference projection.
    Created an SSP operator (subspace dimension = 1)
    9 projection items activated
    Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/examples/ds117/sub016/MEG/run_04_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 137500 ... 680899 =    125.000 ...   618.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 543399  =      0.000 ...   493.999 secs...
    Applying a custom EEG reference.
    Setting up band-pass filter from 1 - 40 Hz
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 14520 samples (13.200 sec) selected
    296 events found
    Events id: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269  270
      273  274  275 4096 4101 4102 4103 4109 4110 4111 4113]
    49 matching events found
    add_eeg_ref will be removed in 0.15, use set_eeg_reference() instead
    Adding average EEG reference projection.
    Created an SSP operator (subspace dimension = 1)
    9 projection items activated
    Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/examples/ds117/sub016/MEG/run_05_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 279400 ... 820599 =    254.000 ...   745.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 541199  =      0.000 ...   491.999 secs...
    Applying a custom EEG reference.
    Setting up band-pass filter from 1 - 40 Hz
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 14520 samples (13.200 sec) selected
    295 events found
    Events id: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269  270
      271  273  274  275 4096 4101 4102 4103 4109 4110 4111 4115 4357 4359]
    47 matching events found
    add_eeg_ref will be removed in 0.15, use set_eeg_reference() instead
    Adding average EEG reference projection.
    Created an SSP operator (subspace dimension = 1)
    9 projection items activated
    Opening raw data file /home/mainak/Desktop/projects/github_repos/autoreject/examples/ds117/sub016/MEG/run_06_raw.fif...
        Read a total of 8 projection items:
            mag_ssp_upright.fif : PCA-mags-v1 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v2 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v3 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v4 (1 x 306)  idle
            mag_ssp_upright.fif : PCA-mags-v5 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v1 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v2 (1 x 306)  idle
            grad_ssp_upright.fif : PCA-grad-v3 (1 x 306)  idle
        Range : 140800 ... 680899 =    128.000 ...   618.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 540099  =      0.000 ...   490.999 secs...
    Applying a custom EEG reference.
    Setting up band-pass filter from 1 - 40 Hz
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 14520 samples (13.200 sec) selected
    296 events found
    Events id: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269  270
      271  273  274  275 4096 4101 4102 4103 4109 4110 4111 4114]
    48 matching events found
    add_eeg_ref will be removed in 0.15, use set_eeg_reference() instead
    Adding average EEG reference projection.
    Created an SSP operator (subspace dimension = 1)
    9 projection items activated
    Loading data for 49 events and 1101 original time points ...
    0 bad epochs dropped
    Loading data for 49 events and 1101 original time points ...
    0 bad epochs dropped
    Loading data for 47 events and 1101 original time points ...
    0 bad epochs dropped
    Loading data for 48 events and 1101 original time points ...
    0 bad epochs dropped
    193 matching events found
    Created an SSP operator (subspace dimension = 1)
    0 bad epochs dropped


Now, we apply autoreject


.. code-block:: python

    from autoreject import LocalAutoRejectCV, compute_thresholds
    from functools import partial

    this_epoch = epochs['famous']
    thresh_func = partial(compute_thresholds, random_state=42)

    ar = LocalAutoRejectCV(thresh_func=thresh_func, verbose='tqdm')
    epochs_ar = ar.fit_transform(this_epoch.copy())





.. rst-class:: sphx-glr-script-out

 Out::

      Estimated consensus_perc=0.70 and n_interpolate=4


... and visualize the bad epochs and sensors. Bad sensors which have been
interpolated are in blue. Bad sensors which are not interpolated are in red.
Bad trials are also in red.


.. code-block:: python

    from autoreject import plot_epochs
    plot_epochs(this_epoch, bad_epochs_idx=ar.bad_epochs_idx,
                fix_log=ar.fix_log, scalings=dict(eeg=40e-6),
                title='')




.. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_001.png
    :align: center




... and the epochs after cleaning with autoreject


.. code-block:: python

    epochs_ar.plot(scalings=dict(eeg=40e-6))




.. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_002.png
    :align: center




Finally, the evoked before and after autoreject, for sanity check. We use
the ``spatial_colors`` argument from MNE as it allows us to see that
the eyeblinks have not yet been cleaned but the bad channels have been
repaired.


.. code-block:: python

    ylim = dict(eeg=(-15, 15))
    epochs.average().plot(ylim=ylim, spatial_colors=True)
    epochs_ar.average().plot(ylim=ylim, spatial_colors=True)



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_003.png
            :scale: 47

    *

      .. image:: /auto_examples/images/sphx_glr_plot_visualize_bad_epochs_004.png
            :scale: 47




**Total running time of the script:**
(9 minutes 14.623 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_visualize_bad_epochs.py <plot_visualize_bad_epochs.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_visualize_bad_epochs.ipynb <plot_visualize_bad_epochs.ipynb>`
