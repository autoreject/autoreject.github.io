
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_autoreject_workflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_autoreject_workflow.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_autoreject_workflow.py:


.. _plot_autoreject_workflow:

===================================================
Preprocessing workflow with ``autoreject`` and ICA
===================================================
This example demonstrates how to visualize data when preprocessing
with :mod:`autoreject` and discusses decisions about when and which
other preprocessing steps to use in combination.

**tldr**: We recommend that you first highpass filter the data,
then run autoreject (local) and supply the bad epochs detected by it
to the ICA algorithm for a robust fit, and finally run
autoreject (local) again.

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: default


    # Author: Alex Rockhill <aprockhill@mailbox.org>
    #         Mainak Jas <mjas@mgh.harvard.edu>
    #         Apoorva Karekal <apoorvak@uoregon.edu>
    #
    # License: BSD-3-Clause

    # sphinx_gallery_thumbnail_number = 9








.. GENERATED FROM PYTHON SOURCE LINES 27-33

.. contents:: Table of Contents
   :local:

First, we download resting-state EEG data from a Parkinson's patient
from OpenNeuro. We will do this using ``openneuro-py`` which can be
installed with the command ``pip install openneuro-py``.

.. GENERATED FROM PYTHON SOURCE LINES 33-48

.. code-block:: default


    import os.path as op
    import matplotlib.pyplot as plt
    import openneuro

    import mne
    import autoreject

    dataset = 'ds002778'  # The id code on OpenNeuro for this example dataset
    subject_id = 'pd14'

    target_dir = op.join(op.dirname(autoreject.__file__), '..', 'examples')
    openneuro.download(dataset=dataset, target_dir=target_dir,
                       include=[f'sub-{subject_id}/ses-off'])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Hello! This is openneuro-py 2022.1.0. Great to see you!

          Please report problems and bugs at
          https://github.com/hoechenberger/openneuro-py/issues

    Preparing to download ds002778 ...
    Cannot determine local revision of the dataset ,and the target directory is not empty. If the download fails, you may want to try again with a fresh (empty) target directory.
    Retrieving up to 12 files (5 concurrent downloads).
    participants.json:   0%|          | 0.00/1.24k [00:00<?, ?B/s]                                                                  participants.tsv:   0%|          | 0.00/1.62k [00:00<?, ?B/s]                                                                 CHANGES: 0.00B [00:00, ?B/s]                                dataset_description.json: 0.00B [00:00, ?B/s]
    README: 0.00B [00:00, ?B/s]                                             
                                   sub-pd14_ses-off_scans.tsv:   0%|          | 0.00/76.0 [00:00<?, ?B/s]                                                                          sub-pd14_ses-off_task-rest_eeg.json:   0%|          | 0.00/471 [00:00<?, ?B/s]                                                                                  sub-pd14_ses-off_task-rest_beh.json: 0.00B [00:00, ?B/s]                                                            sub-pd14_ses-off_task-rest_eeg.bdf:   0%|          | 0.00/17.5M [00:00<?, ?B/s]
    sub-pd14_ses-off_task-rest_beh.tsv: 0.00B [00:00, ?B/s]
                                                           
    sub-pd14_ses-off_task-rest_events.tsv:   0%|          | 0.00/65.0 [00:00<?, ?B/s]
                                                                                     
    sub-pd14_ses-off_task-rest_channels.tsv: 0.00B [00:00, ?B/s]
                                                                    sub-pd14_ses-off_task-rest_eeg.bdf:  19%|#9        | 3.34M/17.5M [00:00<00:00, 35.0MB/s]    sub-pd14_ses-off_task-rest_eeg.bdf:  40%|####      | 7.07M/17.5M [00:00<00:00, 37.4MB/s]    sub-pd14_ses-off_task-rest_eeg.bdf:  61%|######    | 10.6M/17.5M [00:00<00:00, 37.1MB/s]    sub-pd14_ses-off_task-rest_eeg.bdf:  82%|########2 | 14.4M/17.5M [00:00<00:00, 38.2MB/s]                                                                                            Finished downloading ds002778.

    Please enjoy your brains.





.. GENERATED FROM PYTHON SOURCE LINES 49-55

We will now load in the raw data from the bdf file downloaded from OpenNeuro
and, since this is resting-state data without any events, make regularly
spaced events with which to epoch the raw data. In the averaged plot,
we can see that there may be some eyeblink
artifact contamination but, overall, the data is typical of
resting-state EEG.

.. GENERATED FROM PYTHON SOURCE LINES 55-68

.. code-block:: default


    raw_fname = op.join(target_dir, f'sub-{subject_id}',
                        'ses-off', 'eeg', 'sub-pd14_ses-off_task-rest_eeg.bdf')
    raw = mne.io.read_raw_bdf(raw_fname, preload=True)
    dig_montage = mne.channels.make_standard_montage('biosemi32')
    raw.drop_channels([ch for ch in raw.ch_names
                       if ch not in dig_montage.ch_names])
    raw.set_montage(dig_montage)  # use the standard montage
    epochs = mne.make_fixed_length_epochs(raw, duration=3, preload=True)

    # plot the data
    epochs.average().detrend().plot_joint()




.. image-sg:: /auto_examples/images/sphx_glr_plot_autoreject_workflow_001.png
   :alt: 0.006 s, 0.979 s, 2.699 s
   :srcset: /auto_examples/images/sphx_glr_plot_autoreject_workflow_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Extracting EDF parameters from /home/circleci/project/examples/sub-pd14/ses-off/eeg/sub-pd14_ses-off_task-rest_eeg.bdf...
    BDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 149503  =      0.000 ...   291.998 secs...
    Not setting metadata
    97 matching events found
    No baseline correction applied
    0 projection items activated
    Using data from preloaded Raw for 97 events and 1536 original time points ...
    0 bad epochs dropped
    No projector specified for this dataset. Please consider the method self.add_proj.

    <Figure size 800x420 with 7 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 69-80

Autoreject without any other preprocessing
------------------------------------------
Now, we'll naively apply autoreject as our first preprocessing step.

As we can see in the plot of the rejected epochs, there are many eyeblinks
that caused the epoch to be dropped. This resulted in a lot of the data
being lost.

The data looks fairly clean already and we don't want to interpolate
more than a few sensors since we only have 32 to start, so the
number of channels to interpolate was set to check some low numbers

.. GENERATED FROM PYTHON SOURCE LINES 80-85

.. code-block:: default

    ar = autoreject.AutoReject(n_interpolate=[1, 2, 3, 4], random_state=11,
                               n_jobs=1, verbose=True)
    ar.fit(epochs[:20])  # fit on a few epochs to save time
    epochs_ar, reject_log = ar.transform(epochs, return_log=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Running autoreject on ch_type=eeg
      0%|          | Creating augmented epochs : 0/32 [00:00<?,       ?it/s]      6%|6         | Creating augmented epochs : 2/32 [00:00<00:00,  116.98it/s]     12%|#2        | Creating augmented epochs : 4/32 [00:00<00:00,  110.21it/s]     19%|#8        | Creating augmented epochs : 6/32 [00:00<00:00,  108.98it/s]     25%|##5       | Creating augmented epochs : 8/32 [00:00<00:00,  109.52it/s]     31%|###1      | Creating augmented epochs : 10/32 [00:00<00:00,  109.64it/s]     38%|###7      | Creating augmented epochs : 12/32 [00:00<00:00,  109.71it/s]     44%|####3     | Creating augmented epochs : 14/32 [00:00<00:00,  109.32it/s]     50%|#####     | Creating augmented epochs : 16/32 [00:00<00:00,  109.70it/s]     56%|#####6    | Creating augmented epochs : 18/32 [00:00<00:00,  109.84it/s]     62%|######2   | Creating augmented epochs : 20/32 [00:00<00:00,  110.06it/s]     69%|######8   | Creating augmented epochs : 22/32 [00:00<00:00,  109.53it/s]     75%|#######5  | Creating augmented epochs : 24/32 [00:00<00:00,  110.07it/s]     81%|########1 | Creating augmented epochs : 26/32 [00:00<00:00,  110.37it/s]     88%|########7 | Creating augmented epochs : 28/32 [00:00<00:00,  110.46it/s]     94%|#########3| Creating augmented epochs : 30/32 [00:00<00:00,  110.09it/s]    100%|##########| Creating augmented epochs : 32/32 [00:00<00:00,  109.84it/s]    100%|##########| Creating augmented epochs : 32/32 [00:00<00:00,  109.75it/s]
      0%|          | Computing thresholds ... : 0/32 [00:00<?,       ?it/s]      3%|3         | Computing thresholds ... : 1/32 [00:00<00:09,    3.35it/s]      6%|6         | Computing thresholds ... : 2/32 [00:00<00:08,    3.41it/s]      9%|9         | Computing thresholds ... : 3/32 [00:00<00:08,    3.42it/s]     12%|#2        | Computing thresholds ... : 4/32 [00:01<00:08,    3.44it/s]     16%|#5        | Computing thresholds ... : 5/32 [00:01<00:07,    3.48it/s]     19%|#8        | Computing thresholds ... : 6/32 [00:01<00:07,    3.48it/s]     22%|##1       | Computing thresholds ... : 7/32 [00:02<00:07,    3.49it/s]     25%|##5       | Computing thresholds ... : 8/32 [00:02<00:06,    3.49it/s]     28%|##8       | Computing thresholds ... : 9/32 [00:02<00:06,    3.50it/s]     31%|###1      | Computing thresholds ... : 10/32 [00:02<00:06,    3.49it/s]     34%|###4      | Computing thresholds ... : 11/32 [00:03<00:06,    3.48it/s]     38%|###7      | Computing thresholds ... : 12/32 [00:03<00:05,    3.49it/s]     41%|####      | Computing thresholds ... : 13/32 [00:03<00:05,    3.49it/s]     44%|####3     | Computing thresholds ... : 14/32 [00:04<00:05,    3.50it/s]     47%|####6     | Computing thresholds ... : 15/32 [00:04<00:04,    3.50it/s]     50%|#####     | Computing thresholds ... : 16/32 [00:04<00:04,    3.50it/s]     53%|#####3    | Computing thresholds ... : 17/32 [00:04<00:04,    3.50it/s]     56%|#####6    | Computing thresholds ... : 18/32 [00:05<00:03,    3.51it/s]     59%|#####9    | Computing thresholds ... : 19/32 [00:05<00:03,    3.51it/s]     62%|######2   | Computing thresholds ... : 20/32 [00:05<00:03,    3.51it/s]     66%|######5   | Computing thresholds ... : 21/32 [00:05<00:03,    3.51it/s]     69%|######8   | Computing thresholds ... : 22/32 [00:06<00:02,    3.51it/s]     72%|#######1  | Computing thresholds ... : 23/32 [00:06<00:02,    3.52it/s]     75%|#######5  | Computing thresholds ... : 24/32 [00:06<00:02,    3.52it/s]     78%|#######8  | Computing thresholds ... : 25/32 [00:07<00:01,    3.52it/s]     81%|########1 | Computing thresholds ... : 26/32 [00:07<00:01,    3.52it/s]     84%|########4 | Computing thresholds ... : 27/32 [00:07<00:01,    3.52it/s]     88%|########7 | Computing thresholds ... : 28/32 [00:07<00:01,    3.52it/s]     91%|######### | Computing thresholds ... : 29/32 [00:08<00:00,    3.51it/s]     94%|#########3| Computing thresholds ... : 30/32 [00:08<00:00,    3.51it/s]     97%|#########6| Computing thresholds ... : 31/32 [00:08<00:00,    3.51it/s]    100%|##########| Computing thresholds ... : 32/32 [00:09<00:00,    3.51it/s]    100%|##########| Computing thresholds ... : 32/32 [00:09<00:00,    3.51it/s]


      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     40%|####      | Repairing epochs : 8/20 [00:00<00:00,  464.35it/s]

     80%|########  | Repairing epochs : 16/20 [00:00<00:00,  459.91it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  455.45it/s]

      0%|          | n_interp : 0/4 [00:00<?,       ?it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     25%|##5       | Repairing epochs : 5/20 [00:00<00:00,  292.87it/s]

     50%|#####     | Repairing epochs : 10/20 [00:00<00:00,  238.06it/s]

     75%|#######5  | Repairing epochs : 15/20 [00:00<00:00,  245.40it/s]

     90%|######### | Repairing epochs : 18/20 [00:00<00:00,  219.19it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  231.80it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   14.12it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   16.44it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   17.85it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   18.65it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   19.15it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   19.50it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   19.73it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   19.88it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   19.97it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   20.07it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   19.84it/s]

     25%|##5       | n_interp : 1/4 [00:00<00:01,    1.67it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     35%|###5      | Repairing epochs : 7/20 [00:00<00:00,  290.13it/s]

     60%|######    | Repairing epochs : 12/20 [00:00<00:00,  286.29it/s]

     80%|########  | Repairing epochs : 16/20 [00:00<00:00,  246.24it/s]

    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  246.39it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  246.45it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   14.42it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   17.31it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   18.61it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   19.34it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   19.80it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   20.10it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   20.34it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   20.51it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   20.64it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   20.74it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   20.50it/s]

     50%|#####     | n_interp : 2/4 [00:01<00:01,    1.71it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     35%|###5      | Repairing epochs : 7/20 [00:00<00:00,  289.24it/s]

     60%|######    | Repairing epochs : 12/20 [00:00<00:00,  285.30it/s]

     80%|########  | Repairing epochs : 16/20 [00:00<00:00,  246.04it/s]

    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  245.87it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  245.95it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   14.13it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   17.08it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   18.39it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   19.14it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   19.60it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   19.90it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   20.15it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   20.34it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   20.50it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   20.61it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   20.36it/s]

     75%|#######5  | n_interp : 3/4 [00:01<00:00,    1.71it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     35%|###5      | Repairing epochs : 7/20 [00:00<00:00,  288.87it/s]

     60%|######    | Repairing epochs : 12/20 [00:00<00:00,  285.68it/s]

     80%|########  | Repairing epochs : 16/20 [00:00<00:00,  246.06it/s]

    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  246.30it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  246.36it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   15.83it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   18.59it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   20.09it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   20.94it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   21.41it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   21.76it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   21.99it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   22.17it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   22.29it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   22.39it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   22.15it/s]

    100%|##########| n_interp : 4/4 [00:02<00:00,    1.75it/s]    100%|##########| n_interp : 4/4 [00:02<00:00,    1.75it/s]




    Estimated consensus=0.10 and n_interpolate=1


      0%|          | Repairing epochs : 0/97 [00:00<?,       ?it/s]

      7%|7         | Repairing epochs : 7/97 [00:00<00:00,  284.25it/s]

     12%|#2        | Repairing epochs : 12/97 [00:00<00:00,  281.34it/s]

     16%|#6        | Repairing epochs : 16/97 [00:00<00:00,  239.98it/s]

     22%|##1       | Repairing epochs : 21/97 [00:00<00:00,  248.91it/s]

     26%|##5       | Repairing epochs : 25/97 [00:00<00:00,  246.77it/s]

     29%|##8       | Repairing epochs : 28/97 [00:00<00:00,  228.05it/s]

     34%|###4      | Repairing epochs : 33/97 [00:00<00:00,  235.66it/s]

     38%|###8      | Repairing epochs : 37/97 [00:00<00:00,  225.45it/s]

     43%|####3     | Repairing epochs : 42/97 [00:00<00:00,  231.86it/s]

     48%|####8     | Repairing epochs : 47/97 [00:00<00:00,  227.72it/s]

     54%|#####3    | Repairing epochs : 52/97 [00:00<00:00,  232.93it/s]

     57%|#####6    | Repairing epochs : 55/97 [00:00<00:00,  224.07it/s]

     61%|######    | Repairing epochs : 59/97 [00:00<00:00,  217.52it/s]

     66%|######5   | Repairing epochs : 64/97 [00:00<00:00,  216.22it/s]

     68%|######8   | Repairing epochs : 66/97 [00:00<00:00,  207.90it/s]

     70%|#######   | Repairing epochs : 68/97 [00:00<00:00,  199.74it/s]

     72%|#######2  | Repairing epochs : 70/97 [00:00<00:00,  192.49it/s]

     74%|#######4  | Repairing epochs : 72/97 [00:00<00:00,  185.77it/s]

     76%|#######6  | Repairing epochs : 74/97 [00:00<00:00,  179.38it/s]

     78%|#######8  | Repairing epochs : 76/97 [00:00<00:00,  174.27it/s]

     80%|########  | Repairing epochs : 78/97 [00:00<00:00,  169.94it/s]

     82%|########2 | Repairing epochs : 80/97 [00:00<00:00,  165.64it/s]

     85%|########4 | Repairing epochs : 82/97 [00:00<00:00,  162.04it/s]

     87%|########6 | Repairing epochs : 84/97 [00:00<00:00,  159.58it/s]

     89%|########8 | Repairing epochs : 86/97 [00:00<00:00,  155.67it/s]

     91%|######### | Repairing epochs : 88/97 [00:00<00:00,  152.77it/s]

     93%|#########2| Repairing epochs : 90/97 [00:00<00:00,  150.11it/s]

     95%|#########4| Repairing epochs : 92/97 [00:00<00:00,  148.17it/s]

     97%|#########6| Repairing epochs : 94/97 [00:00<00:00,  146.35it/s]

     99%|#########8| Repairing epochs : 96/97 [00:00<00:00,  144.18it/s]    100%|##########| Repairing epochs : 97/97 [00:00<00:00,  164.23it/s]
    Dropped 27 epochs: 54, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 89, 91, 92, 95, 96




.. GENERATED FROM PYTHON SOURCE LINES 86-87

visualize the dropped epochs

.. GENERATED FROM PYTHON SOURCE LINES 87-89

.. code-block:: default

    epochs[reject_log.bad_epochs].plot(scalings=dict(eeg=100e-6))




.. image-sg:: /auto_examples/images/sphx_glr_plot_autoreject_workflow_002.png
   :alt: plot autoreject workflow
   :srcset: /auto_examples/images/sphx_glr_plot_autoreject_workflow_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using matplotlib as 2D backend.

    <MNEBrowseFigure size 800x800 with 4 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 90-91

and the reject log

.. GENERATED FROM PYTHON SOURCE LINES 91-93

.. code-block:: default

    reject_log.plot('horizontal')




.. image-sg:: /auto_examples/images/sphx_glr_plot_autoreject_workflow_003.png
   :alt: plot autoreject workflow
   :srcset: /auto_examples/images/sphx_glr_plot_autoreject_workflow_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x600 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 94-108

Autoreject with high-pass filter
--------------------------------
The data may be very valuable and the time for the experiment
limited and so we may want to take steps to reduce the number of
epochs dropped by first using other steps to preprocess the data.
We will use a high-pass filter first to remove slow drift that could
cause epochs to be dropped.

When making this decision to filter the data, we do want to be careful
because filtering can spread sharp, high-frequency transients and
distort the phase of the signal. Most evoked response potential
analyses use filtering since the interest is in the time series, but
if you are doing a frequency based analysis, filtering before the
Fourier transform could potentially be avoided by detrending instead.

.. GENERATED FROM PYTHON SOURCE LINES 108-116

.. code-block:: default


    raw.filter(l_freq=1, h_freq=None)
    epochs = mne.make_fixed_length_epochs(raw, duration=3, preload=True)
    ar = autoreject.AutoReject(n_interpolate=[1, 2, 3, 4], random_state=11,
                               n_jobs=1, verbose=True)
    ar.fit(epochs[:20])  # fit on a few epochs to save time
    epochs_ar, reject_log = ar.transform(epochs, return_log=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering raw data in 1 contiguous segment
    Setting up high-pass filter at 1 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal highpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 1.00 Hz (-6 dB cutoff frequency: 0.50 Hz)
    - Filter length: 1691 samples (3.303 sec)

    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   4 out of   4 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  32 out of  32 | elapsed:    0.1s finished
    Not setting metadata
    97 matching events found
    No baseline correction applied
    0 projection items activated
    Using data from preloaded Raw for 97 events and 1536 original time points ...
    0 bad epochs dropped
    Running autoreject on ch_type=eeg
      0%|          | Creating augmented epochs : 0/32 [00:00<?,       ?it/s]      6%|6         | Creating augmented epochs : 2/32 [00:00<00:00,  121.04it/s]     12%|#2        | Creating augmented epochs : 4/32 [00:00<00:00,  112.29it/s]     19%|#8        | Creating augmented epochs : 6/32 [00:00<00:00,  110.31it/s]     25%|##5       | Creating augmented epochs : 8/32 [00:00<00:00,  110.84it/s]     31%|###1      | Creating augmented epochs : 10/32 [00:00<00:00,  110.80it/s]     38%|###7      | Creating augmented epochs : 12/32 [00:00<00:00,  110.66it/s]     44%|####3     | Creating augmented epochs : 14/32 [00:00<00:00,  110.10it/s]     50%|#####     | Creating augmented epochs : 16/32 [00:00<00:00,  110.21it/s]     56%|#####6    | Creating augmented epochs : 18/32 [00:00<00:00,  110.32it/s]     62%|######2   | Creating augmented epochs : 20/32 [00:00<00:00,  110.41it/s]     69%|######8   | Creating augmented epochs : 22/32 [00:00<00:00,  109.88it/s]     75%|#######5  | Creating augmented epochs : 24/32 [00:00<00:00,  110.45it/s]     81%|########1 | Creating augmented epochs : 26/32 [00:00<00:00,  110.78it/s]     88%|########7 | Creating augmented epochs : 28/32 [00:00<00:00,  110.90it/s]     94%|#########3| Creating augmented epochs : 30/32 [00:00<00:00,  110.51it/s]    100%|##########| Creating augmented epochs : 32/32 [00:00<00:00,  110.14it/s]    100%|##########| Creating augmented epochs : 32/32 [00:00<00:00,  110.14it/s]
      0%|          | Computing thresholds ... : 0/32 [00:00<?,       ?it/s]      3%|3         | Computing thresholds ... : 1/32 [00:00<00:10,    3.09it/s]      6%|6         | Computing thresholds ... : 2/32 [00:00<00:09,    3.08it/s]      9%|9         | Computing thresholds ... : 3/32 [00:00<00:09,    3.08it/s]     12%|#2        | Computing thresholds ... : 4/32 [00:01<00:09,    3.05it/s]     16%|#5        | Computing thresholds ... : 5/32 [00:01<00:08,    3.05it/s]     19%|#8        | Computing thresholds ... : 6/32 [00:01<00:08,    3.06it/s]     22%|##1       | Computing thresholds ... : 7/32 [00:02<00:08,    3.05it/s]     25%|##5       | Computing thresholds ... : 8/32 [00:02<00:07,    3.04it/s]     28%|##8       | Computing thresholds ... : 9/32 [00:02<00:07,    3.03it/s]     31%|###1      | Computing thresholds ... : 10/32 [00:03<00:07,    3.03it/s]     34%|###4      | Computing thresholds ... : 11/32 [00:03<00:06,    3.03it/s]     38%|###7      | Computing thresholds ... : 12/32 [00:03<00:06,    3.04it/s]     41%|####      | Computing thresholds ... : 13/32 [00:04<00:06,    3.04it/s]     44%|####3     | Computing thresholds ... : 14/32 [00:04<00:05,    3.05it/s]     47%|####6     | Computing thresholds ... : 15/32 [00:04<00:05,    3.06it/s]     50%|#####     | Computing thresholds ... : 16/32 [00:05<00:05,    3.07it/s]     53%|#####3    | Computing thresholds ... : 17/32 [00:05<00:04,    3.07it/s]     56%|#####6    | Computing thresholds ... : 18/32 [00:05<00:04,    3.07it/s]     59%|#####9    | Computing thresholds ... : 19/32 [00:06<00:04,    3.08it/s]     62%|######2   | Computing thresholds ... : 20/32 [00:06<00:03,    3.08it/s]     66%|######5   | Computing thresholds ... : 21/32 [00:06<00:03,    3.08it/s]     69%|######8   | Computing thresholds ... : 22/32 [00:07<00:03,    3.08it/s]     72%|#######1  | Computing thresholds ... : 23/32 [00:07<00:02,    3.08it/s]     75%|#######5  | Computing thresholds ... : 24/32 [00:07<00:02,    3.08it/s]     78%|#######8  | Computing thresholds ... : 25/32 [00:08<00:02,    3.08it/s]     81%|########1 | Computing thresholds ... : 26/32 [00:08<00:01,    3.08it/s]     84%|########4 | Computing thresholds ... : 27/32 [00:08<00:01,    3.08it/s]     88%|########7 | Computing thresholds ... : 28/32 [00:09<00:01,    3.08it/s]     91%|######### | Computing thresholds ... : 29/32 [00:09<00:00,    3.08it/s]     94%|#########3| Computing thresholds ... : 30/32 [00:09<00:00,    3.08it/s]     97%|#########6| Computing thresholds ... : 31/32 [00:10<00:00,    3.08it/s]    100%|##########| Computing thresholds ... : 32/32 [00:10<00:00,    3.08it/s]    100%|##########| Computing thresholds ... : 32/32 [00:10<00:00,    3.08it/s]


      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     40%|####      | Repairing epochs : 8/20 [00:00<00:00,  472.71it/s]

     80%|########  | Repairing epochs : 16/20 [00:00<00:00,  468.36it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  463.86it/s]

      0%|          | n_interp : 0/4 [00:00<?,       ?it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     10%|#         | Repairing epochs : 2/20 [00:00<00:00,  109.84it/s]

     25%|##5       | Repairing epochs : 5/20 [00:00<00:00,  132.21it/s]

     35%|###5      | Repairing epochs : 7/20 [00:00<00:00,  124.45it/s]

     60%|######    | Repairing epochs : 12/20 [00:00<00:00,  149.23it/s]

     75%|#######5  | Repairing epochs : 15/20 [00:00<00:00,  148.11it/s]

     85%|########5 | Repairing epochs : 17/20 [00:00<00:00,  142.24it/s]

     95%|#########5| Repairing epochs : 19/20 [00:00<00:00,  138.10it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  135.74it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   14.28it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   16.46it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   18.09it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   18.97it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   19.54it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   19.93it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   20.15it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   20.31it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   20.40it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   20.50it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   20.26it/s]

     25%|##5       | n_interp : 1/4 [00:00<00:01,    1.52it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     15%|#5        | Repairing epochs : 3/20 [00:00<00:00,  155.77it/s]

     35%|###5      | Repairing epochs : 7/20 [00:00<00:00,  166.68it/s]

     60%|######    | Repairing epochs : 12/20 [00:00<00:00,  178.30it/s]

     75%|#######5  | Repairing epochs : 15/20 [00:00<00:00,  166.41it/s]

     85%|########5 | Repairing epochs : 17/20 [00:00<00:00,  156.52it/s]

     95%|#########5| Repairing epochs : 19/20 [00:00<00:00,  150.60it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  152.46it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   21.97it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   22.06it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   22.11it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   22.13it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   22.11it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   22.11it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   22.10it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   22.12it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   22.12it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   22.12it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   22.09it/s]

     50%|#####     | n_interp : 2/4 [00:01<00:01,    1.60it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     15%|#5        | Repairing epochs : 3/20 [00:00<00:00,  177.19it/s]

     35%|###5      | Repairing epochs : 7/20 [00:00<00:00,  176.25it/s]

     60%|######    | Repairing epochs : 12/20 [00:00<00:00,  183.50it/s]

     75%|#######5  | Repairing epochs : 15/20 [00:00<00:00,  168.96it/s]

     85%|########5 | Repairing epochs : 17/20 [00:00<00:00,  158.57it/s]

     95%|#########5| Repairing epochs : 19/20 [00:00<00:00,  152.59it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  155.15it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   21.59it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   21.73it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   21.77it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   21.81it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   21.83it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   21.87it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   21.87it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   21.86it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   21.83it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   21.84it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   21.81it/s]

     75%|#######5  | n_interp : 3/4 [00:01<00:00,    1.62it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     15%|#5        | Repairing epochs : 3/20 [00:00<00:00,  181.70it/s]

     35%|###5      | Repairing epochs : 7/20 [00:00<00:00,  178.05it/s]

     60%|######    | Repairing epochs : 12/20 [00:00<00:00,  184.16it/s]

     75%|#######5  | Repairing epochs : 15/20 [00:00<00:00,  171.02it/s]

     85%|########5 | Repairing epochs : 17/20 [00:00<00:00,  160.03it/s]

     95%|#########5| Repairing epochs : 19/20 [00:00<00:00,  153.42it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  155.92it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   23.70it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   23.83it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   23.97it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   24.00it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   23.99it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   23.98it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   23.92it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   23.86it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   23.77it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   23.72it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   23.73it/s]

    100%|##########| n_interp : 4/4 [00:02<00:00,    1.66it/s]    100%|##########| n_interp : 4/4 [00:02<00:00,    1.66it/s]




    Estimated consensus=0.40 and n_interpolate=4


      0%|          | Repairing epochs : 0/97 [00:00<?,       ?it/s]

      4%|4         | Repairing epochs : 4/97 [00:00<00:00,  234.09it/s]

      7%|7         | Repairing epochs : 7/97 [00:00<00:00,  179.21it/s]

     12%|#2        | Repairing epochs : 12/97 [00:00<00:00,  183.87it/s]

     15%|#5        | Repairing epochs : 15/97 [00:00<00:00,  175.81it/s]

     18%|#7        | Repairing epochs : 17/97 [00:00<00:00,  163.74it/s]

     20%|#9        | Repairing epochs : 19/97 [00:00<00:00,  154.48it/s]

     23%|##2       | Repairing epochs : 22/97 [00:00<00:00,  158.49it/s]

     26%|##5       | Repairing epochs : 25/97 [00:00<00:00,  162.11it/s]

     29%|##8       | Repairing epochs : 28/97 [00:00<00:00,  164.35it/s]

     32%|###1      | Repairing epochs : 31/97 [00:00<00:00,  165.77it/s]

     35%|###5      | Repairing epochs : 34/97 [00:00<00:00,  166.89it/s]

     37%|###7      | Repairing epochs : 36/97 [00:00<00:00,  160.46it/s]

     39%|###9      | Repairing epochs : 38/97 [00:00<00:00,  155.11it/s]

     41%|####1     | Repairing epochs : 40/97 [00:00<00:00,  151.09it/s]

     43%|####3     | Repairing epochs : 42/97 [00:00<00:00,  147.05it/s]

     45%|####5     | Repairing epochs : 44/97 [00:00<00:00,  144.38it/s]

     47%|####7     | Repairing epochs : 46/97 [00:00<00:00,  141.47it/s]

     49%|####9     | Repairing epochs : 48/97 [00:00<00:00,  139.46it/s]

     52%|#####1    | Repairing epochs : 50/97 [00:00<00:00,  136.83it/s]

     54%|#####3    | Repairing epochs : 52/97 [00:00<00:00,  135.70it/s]

     57%|#####6    | Repairing epochs : 55/97 [00:00<00:00,  139.06it/s]

     60%|#####9    | Repairing epochs : 58/97 [00:00<00:00,  139.96it/s]

     62%|######1   | Repairing epochs : 60/97 [00:00<00:00,  137.68it/s]

     64%|######3   | Repairing epochs : 62/97 [00:00<00:00,  135.59it/s]

     66%|######5   | Repairing epochs : 64/97 [00:00<00:00,  133.84it/s]

     68%|######8   | Repairing epochs : 66/97 [00:00<00:00,  132.28it/s]

     70%|#######   | Repairing epochs : 68/97 [00:00<00:00,  131.28it/s]

     72%|#######2  | Repairing epochs : 70/97 [00:00<00:00,  129.64it/s]

     74%|#######4  | Repairing epochs : 72/97 [00:00<00:00,  129.21it/s]

     77%|#######7  | Repairing epochs : 75/97 [00:00<00:00,  132.03it/s]

     80%|########  | Repairing epochs : 78/97 [00:00<00:00,  134.74it/s]

     85%|########4 | Repairing epochs : 82/97 [00:00<00:00,  139.00it/s]

     88%|########7 | Repairing epochs : 85/97 [00:00<00:00,  141.10it/s]

     91%|######### | Repairing epochs : 88/97 [00:00<00:00,  143.42it/s]

     94%|#########3| Repairing epochs : 91/97 [00:00<00:00,  145.54it/s]

     97%|#########6| Repairing epochs : 94/97 [00:00<00:00,  147.57it/s]

    100%|##########| Repairing epochs : 97/97 [00:00<00:00,  149.68it/s]    100%|##########| Repairing epochs : 97/97 [00:00<00:00,  146.13it/s]
    Dropped 23 epochs: 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 86, 89, 91, 92, 95, 96




.. GENERATED FROM PYTHON SOURCE LINES 117-118

visualize the dropped epochs

.. GENERATED FROM PYTHON SOURCE LINES 118-120

.. code-block:: default

    epochs[reject_log.bad_epochs].plot(scalings=dict(eeg=100e-6))




.. image-sg:: /auto_examples/images/sphx_glr_plot_autoreject_workflow_004.png
   :alt: plot autoreject workflow
   :srcset: /auto_examples/images/sphx_glr_plot_autoreject_workflow_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <MNEBrowseFigure size 800x800 with 4 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 121-123

and the reject log. As we can see in the plot, high-pass filtering reduced
the number of epochs marked as bad by autoreject substantially.

.. GENERATED FROM PYTHON SOURCE LINES 123-125

.. code-block:: default

    reject_log.plot('horizontal')




.. image-sg:: /auto_examples/images/sphx_glr_plot_autoreject_workflow_005.png
   :alt: plot autoreject workflow
   :srcset: /auto_examples/images/sphx_glr_plot_autoreject_workflow_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x600 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 126-138

ICA
---
Finally, we can apply independent components analysis (ICA) to remove
eyeblinks from the data. If our analysis were to be very dependent on
sensors at the front of the head, we could skip ICA and use the previous
result. However, ICA can increase the amount of usable data by applying
a spatial filter that downscales the data in sensors most affected by
eyeblink artifacts.

Note that ICA works best if bad segments of the data are removed
Hence, we will remove the bad segments from the
previous run of autoreject for the benefit of the ICA algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 138-143

.. code-block:: default


    # compute ICA
    ica = mne.preprocessing.ICA(random_state=99)
    ica.fit(epochs[~reject_log.bad_epochs])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting ICA to data using 32 channels (please be patient, this may take a while)
    Selecting by non-zero PCA components: 32 components
    Fitting ICA took 3.1s.


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table class="table table-hover table-striped table-sm table-responsive small">
        <tr>
            <th>Method</th>
            <td>fastica</td>
        </tr>
        <tr>
            <th>Fit</th>
            <td>49 iterations on epochs (113664 samples)</td>
        </tr>
    
        <tr>
            <th>ICA components</th>
            <td>32</td>
        </tr>
        <tr>
            <th>Explained variance</th>
            <td>100.0&nbsp;%</td>
        </tr>
        <tr>
            <th>Available PCA components</th>
            <td>32</td>
        </tr>
        <tr>
            <th>Channel types</th>
            <td>eeg</td>
        </tr>
        <tr>
            <th>ICA components marked for exclusion</th>
            <td>&mdash;</td>
        </tr>
    
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 144-148

We can see in the plots below that ICA effectively removed eyeblink
artifact.

plot source components to see which is made up of blinks

.. GENERATED FROM PYTHON SOURCE LINES 148-154

.. code-block:: default

    exclude = [0,  # blinks
               2  # saccades
               ]
    ica.plot_components(exclude)
    ica.exclude = exclude




.. image-sg:: /auto_examples/images/sphx_glr_plot_autoreject_workflow_006.png
   :alt: ICA components, ICA000, ICA002
   :srcset: /auto_examples/images/sphx_glr_plot_autoreject_workflow_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 155-156

plot with and without eyeblink component

.. GENERATED FROM PYTHON SOURCE LINES 156-159

.. code-block:: default

    ica.plot_overlay(epochs.average(), exclude=ica.exclude)
    ica.apply(epochs, exclude=ica.exclude)




.. image-sg:: /auto_examples/images/sphx_glr_plot_autoreject_workflow_007.png
   :alt: Signals before (red) and after (black) cleaning, EEG (32 channels)
   :srcset: /auto_examples/images/sphx_glr_plot_autoreject_workflow_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Applying ICA to Evoked instance
        Transforming to ICA space (32 components)
        Zeroing out 2 ICA components
        Projecting back using 32 PCA components
    Applying ICA to Epochs instance
        Transforming to ICA space (32 components)
        Zeroing out 2 ICA components
        Projecting back using 32 PCA components


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table class="table table-hover table-striped table-sm table-responsive small">
        <tr>
            <th>Number of events</th>
            <td>97</td>
        </tr>
        <tr>
            <th>Events</th>
        
            <td>1: 97</td>
        
        </tr>
        <tr>
            <th>Time range</th>
            <td>0.000 – 2.998 sec</td>
        </tr>
        <tr>
            <th>Baseline</th>
            <td>off</td>
        </tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 160-173

Autoreject with highpass filter and ICA
---------------------------------------
We can see in this section that preprocessing, especially ICA, can be made
to do a lot of the heavy lifting. There isn't a huge difference when viewing
the averaged data because the ICA effectively limited the number
of epochs that had to be dropped. However, there are still artifacts such as
non-stereotypical blinks that weren't able to be removed by ICA, channel
"pops" (sharp transients with exponential RC decay), muscle artifact such as
jaw clenches and gross movement artifact that could still impact analyses.

These are the basic steps for a workflow with decisions that must be
made based on what the data is being used for. Following this may help
you optimize your use of ``autoreject`` in preprocessing.

.. GENERATED FROM PYTHON SOURCE LINES 173-181

.. code-block:: default


    # compute channel-level rejections
    ar = autoreject.AutoReject(n_interpolate=[1, 2, 3, 4], random_state=11,
                               n_jobs=1, verbose=True)
    ar.fit(epochs[:20])  # fit on the first 20 epochs to save time
    epochs_ar, reject_log = ar.transform(epochs, return_log=True)
    epochs[reject_log.bad_epochs].plot(scalings=dict(eeg=100e-6))




.. image-sg:: /auto_examples/images/sphx_glr_plot_autoreject_workflow_008.png
   :alt: plot autoreject workflow
   :srcset: /auto_examples/images/sphx_glr_plot_autoreject_workflow_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Running autoreject on ch_type=eeg
      0%|          | Creating augmented epochs : 0/32 [00:00<?,       ?it/s]      9%|9         | Creating augmented epochs : 3/32 [00:00<00:00,  118.96it/s]     16%|#5        | Creating augmented epochs : 5/32 [00:00<00:00,  114.07it/s]     22%|##1       | Creating augmented epochs : 7/32 [00:00<00:00,  112.89it/s]     28%|##8       | Creating augmented epochs : 9/32 [00:00<00:00,  111.71it/s]     34%|###4      | Creating augmented epochs : 11/32 [00:00<00:00,  111.19it/s]     41%|####      | Creating augmented epochs : 13/32 [00:00<00:00,  111.30it/s]     47%|####6     | Creating augmented epochs : 15/32 [00:00<00:00,  110.07it/s]     53%|#####3    | Creating augmented epochs : 17/32 [00:00<00:00,  110.17it/s]     59%|#####9    | Creating augmented epochs : 19/32 [00:00<00:00,  109.60it/s]     66%|######5   | Creating augmented epochs : 21/32 [00:00<00:00,  110.19it/s]     72%|#######1  | Creating augmented epochs : 23/32 [00:00<00:00,  109.97it/s]     78%|#######8  | Creating augmented epochs : 25/32 [00:00<00:00,  108.62it/s]     84%|########4 | Creating augmented epochs : 27/32 [00:00<00:00,  109.28it/s]     91%|######### | Creating augmented epochs : 29/32 [00:00<00:00,  108.95it/s]     97%|#########6| Creating augmented epochs : 31/32 [00:00<00:00,  108.57it/s]    100%|##########| Creating augmented epochs : 32/32 [00:00<00:00,  108.88it/s]
      0%|          | Computing thresholds ... : 0/32 [00:00<?,       ?it/s]      3%|3         | Computing thresholds ... : 1/32 [00:00<00:10,    2.84it/s]      6%|6         | Computing thresholds ... : 2/32 [00:00<00:10,    2.83it/s]      9%|9         | Computing thresholds ... : 3/32 [00:01<00:10,    2.84it/s]     12%|#2        | Computing thresholds ... : 4/32 [00:01<00:09,    2.85it/s]     16%|#5        | Computing thresholds ... : 5/32 [00:01<00:09,    2.86it/s]     19%|#8        | Computing thresholds ... : 6/32 [00:02<00:09,    2.86it/s]     22%|##1       | Computing thresholds ... : 7/32 [00:02<00:08,    2.86it/s]     25%|##5       | Computing thresholds ... : 8/32 [00:02<00:08,    2.87it/s]     28%|##8       | Computing thresholds ... : 9/32 [00:03<00:08,    2.87it/s]     31%|###1      | Computing thresholds ... : 10/32 [00:03<00:07,    2.87it/s]     34%|###4      | Computing thresholds ... : 11/32 [00:03<00:07,    2.88it/s]     38%|###7      | Computing thresholds ... : 12/32 [00:04<00:06,    2.88it/s]     41%|####      | Computing thresholds ... : 13/32 [00:04<00:06,    2.88it/s]     44%|####3     | Computing thresholds ... : 14/32 [00:04<00:06,    2.89it/s]     47%|####6     | Computing thresholds ... : 15/32 [00:05<00:05,    2.89it/s]     50%|#####     | Computing thresholds ... : 16/32 [00:05<00:05,    2.90it/s]     53%|#####3    | Computing thresholds ... : 17/32 [00:05<00:05,    2.90it/s]     56%|#####6    | Computing thresholds ... : 18/32 [00:06<00:04,    2.90it/s]     59%|#####9    | Computing thresholds ... : 19/32 [00:06<00:04,    2.90it/s]     62%|######2   | Computing thresholds ... : 20/32 [00:06<00:04,    2.90it/s]     66%|######5   | Computing thresholds ... : 21/32 [00:07<00:03,    2.90it/s]     69%|######8   | Computing thresholds ... : 22/32 [00:07<00:03,    2.90it/s]     72%|#######1  | Computing thresholds ... : 23/32 [00:07<00:03,    2.90it/s]     75%|#######5  | Computing thresholds ... : 24/32 [00:08<00:02,    2.90it/s]     78%|#######8  | Computing thresholds ... : 25/32 [00:08<00:02,    2.89it/s]     81%|########1 | Computing thresholds ... : 26/32 [00:08<00:02,    2.89it/s]     84%|########4 | Computing thresholds ... : 27/32 [00:09<00:01,    2.89it/s]     88%|########7 | Computing thresholds ... : 28/32 [00:09<00:01,    2.89it/s]     91%|######### | Computing thresholds ... : 29/32 [00:10<00:01,    2.89it/s]     94%|#########3| Computing thresholds ... : 30/32 [00:10<00:00,    2.89it/s]     97%|#########6| Computing thresholds ... : 31/32 [00:10<00:00,    2.88it/s]    100%|##########| Computing thresholds ... : 32/32 [00:11<00:00,    2.88it/s]    100%|##########| Computing thresholds ... : 32/32 [00:11<00:00,    2.89it/s]


      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     40%|####      | Repairing epochs : 8/20 [00:00<00:00,  468.03it/s]

     80%|########  | Repairing epochs : 16/20 [00:00<00:00,  464.60it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  460.05it/s]

      0%|          | n_interp : 0/4 [00:00<?,       ?it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     25%|##5       | Repairing epochs : 5/20 [00:00<00:00,  294.64it/s]

     50%|#####     | Repairing epochs : 10/20 [00:00<00:00,  242.08it/s]

     70%|#######   | Repairing epochs : 14/20 [00:00<00:00,  218.22it/s]

     80%|########  | Repairing epochs : 16/20 [00:00<00:00,  189.99it/s]

     90%|######### | Repairing epochs : 18/20 [00:00<00:00,  175.12it/s]

    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  164.76it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  168.79it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   14.21it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   16.32it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   17.72it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   18.56it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   19.07it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   19.42it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   19.71it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   19.92it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   20.07it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   20.20it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   19.94it/s]

     25%|##5       | n_interp : 1/4 [00:00<00:01,    1.58it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     30%|###       | Repairing epochs : 6/20 [00:00<00:00,  344.91it/s]

     55%|#####5    | Repairing epochs : 11/20 [00:00<00:00,  318.09it/s]

     70%|#######   | Repairing epochs : 14/20 [00:00<00:00,  252.92it/s]

     80%|########  | Repairing epochs : 16/20 [00:00<00:00,  212.24it/s]

     90%|######### | Repairing epochs : 18/20 [00:00<00:00,  192.05it/s]

    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  177.81it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  183.80it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   14.28it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   16.36it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   17.82it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   18.65it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   19.07it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   19.42it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   19.70it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   19.92it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   20.08it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   20.21it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   19.95it/s]

     50%|#####     | n_interp : 2/4 [00:01<00:01,    1.60it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     30%|###       | Repairing epochs : 6/20 [00:00<00:00,  342.42it/s]

     50%|#####     | Repairing epochs : 10/20 [00:00<00:00,  292.91it/s]

     70%|#######   | Repairing epochs : 14/20 [00:00<00:00,  245.89it/s]

     80%|########  | Repairing epochs : 16/20 [00:00<00:00,  203.55it/s]

     90%|######### | Repairing epochs : 18/20 [00:00<00:00,  184.85it/s]

    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  173.84it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  179.23it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   13.90it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   16.02it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   17.34it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   18.08it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   18.53it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   18.88it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   19.16it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   19.35it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   19.49it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   19.61it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   19.37it/s]

     75%|#######5  | n_interp : 3/4 [00:01<00:00,    1.59it/s]

      0%|          | Repairing epochs : 0/20 [00:00<?,       ?it/s]

     30%|###       | Repairing epochs : 6/20 [00:00<00:00,  346.03it/s]

     50%|#####     | Repairing epochs : 10/20 [00:00<00:00,  294.40it/s]

     70%|#######   | Repairing epochs : 14/20 [00:00<00:00,  246.26it/s]

     80%|########  | Repairing epochs : 16/20 [00:00<00:00,  205.97it/s]

     90%|######### | Repairing epochs : 18/20 [00:00<00:00,  186.64it/s]

    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  174.68it/s]    100%|##########| Repairing epochs : 20/20 [00:00<00:00,  180.07it/s]



      0%|          | Fold : 0/10 [00:00<?,       ?it/s]


     10%|#         | Fold : 1/10 [00:00<00:00,   15.85it/s]


     20%|##        | Fold : 2/10 [00:00<00:00,   17.72it/s]


     30%|###       | Fold : 3/10 [00:00<00:00,   19.43it/s]


     40%|####      | Fold : 4/10 [00:00<00:00,   20.41it/s]


     50%|#####     | Fold : 5/10 [00:00<00:00,   21.07it/s]


     60%|######    | Fold : 6/10 [00:00<00:00,   21.52it/s]


     70%|#######   | Fold : 7/10 [00:00<00:00,   21.86it/s]


     80%|########  | Fold : 8/10 [00:00<00:00,   22.12it/s]


     90%|######### | Fold : 9/10 [00:00<00:00,   22.30it/s]


    100%|##########| Fold : 10/10 [00:00<00:00,   22.43it/s]    100%|##########| Fold : 10/10 [00:00<00:00,   22.12it/s]

    100%|##########| n_interp : 4/4 [00:02<00:00,    1.63it/s]    100%|##########| n_interp : 4/4 [00:02<00:00,    1.62it/s]




    Estimated consensus=0.40 and n_interpolate=2


      0%|          | Repairing epochs : 0/97 [00:00<?,       ?it/s]

      6%|6         | Repairing epochs : 6/97 [00:00<00:00,  355.50it/s]

     11%|#1        | Repairing epochs : 11/97 [00:00<00:00,  312.53it/s]

     14%|#4        | Repairing epochs : 14/97 [00:00<00:00,  249.55it/s]

     16%|#6        | Repairing epochs : 16/97 [00:00<00:00,  210.90it/s]

     19%|#8        | Repairing epochs : 18/97 [00:00<00:00,  190.29it/s]

     21%|##        | Repairing epochs : 20/97 [00:00<00:00,  176.45it/s]

     23%|##2       | Repairing epochs : 22/97 [00:00<00:00,  166.50it/s]

     25%|##4       | Repairing epochs : 24/97 [00:00<00:00,  159.35it/s]

     27%|##6       | Repairing epochs : 26/97 [00:00<00:00,  153.09it/s]

     29%|##8       | Repairing epochs : 28/97 [00:00<00:00,  146.91it/s]

     31%|###       | Repairing epochs : 30/97 [00:00<00:00,  143.51it/s]

     33%|###2      | Repairing epochs : 32/97 [00:00<00:00,  139.56it/s]

     35%|###5      | Repairing epochs : 34/97 [00:00<00:00,  137.34it/s]

     37%|###7      | Repairing epochs : 36/97 [00:00<00:00,  134.55it/s]

     39%|###9      | Repairing epochs : 38/97 [00:00<00:00,  131.56it/s]

     42%|####2     | Repairing epochs : 41/97 [00:00<00:00,  132.60it/s]

     44%|####4     | Repairing epochs : 43/97 [00:00<00:00,  129.85it/s]

     46%|####6     | Repairing epochs : 45/97 [00:00<00:00,  128.40it/s]

     48%|####8     | Repairing epochs : 47/97 [00:00<00:00,  126.93it/s]

     52%|#####1    | Repairing epochs : 50/97 [00:00<00:00,  128.73it/s]

     54%|#####3    | Repairing epochs : 52/97 [00:00<00:00,  127.66it/s]

     57%|#####6    | Repairing epochs : 55/97 [00:00<00:00,  127.90it/s]

     60%|#####9    | Repairing epochs : 58/97 [00:00<00:00,  129.41it/s]

     63%|######2   | Repairing epochs : 61/97 [00:00<00:00,  130.26it/s]

     66%|######5   | Repairing epochs : 64/97 [00:00<00:00,  131.54it/s]

     68%|######8   | Repairing epochs : 66/97 [00:00<00:00,  130.04it/s]

     70%|#######   | Repairing epochs : 68/97 [00:00<00:00,  128.86it/s]

     72%|#######2  | Repairing epochs : 70/97 [00:00<00:00,  127.89it/s]

     75%|#######5  | Repairing epochs : 73/97 [00:00<00:00,  129.57it/s]

     78%|#######8  | Repairing epochs : 76/97 [00:00<00:00,  131.95it/s]

     81%|########1 | Repairing epochs : 79/97 [00:00<00:00,  134.28it/s]

     85%|########4 | Repairing epochs : 82/97 [00:00<00:00,  136.48it/s]

     88%|########7 | Repairing epochs : 85/97 [00:00<00:00,  138.68it/s]

     91%|######### | Repairing epochs : 88/97 [00:00<00:00,  140.73it/s]

     94%|#########3| Repairing epochs : 91/97 [00:00<00:00,  142.37it/s]

     97%|#########6| Repairing epochs : 94/97 [00:00<00:00,  143.90it/s]

    100%|##########| Repairing epochs : 97/97 [00:00<00:00,  145.57it/s]    100%|##########| Repairing epochs : 97/97 [00:00<00:00,  141.81it/s]
    Dropped 11 epochs: 62, 63, 64, 65, 69, 71, 72, 73, 80, 95, 96

    <MNEBrowseFigure size 800x800 with 4 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 182-190

We will do a few more visualizations to see that removing the bad epochs
found by ``autoreject`` is still important even with preprocessing first.
This is especially important if your analyses include trial-level statistics
such as looking for bursting activity. We'll visualize why autoreject
excluded these epochs and the effect that including these bad epochs would
have on the data.

First, we will visualize the reject log

.. GENERATED FROM PYTHON SOURCE LINES 190-192

.. code-block:: default

    reject_log.plot('horizontal')




.. image-sg:: /auto_examples/images/sphx_glr_plot_autoreject_workflow_009.png
   :alt: plot autoreject workflow
   :srcset: /auto_examples/images/sphx_glr_plot_autoreject_workflow_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x600 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 193-195

Next, we will visualize the cleaned average data and compare it against
the bad segments.

.. GENERATED FROM PYTHON SOURCE LINES 195-200

.. code-block:: default

    evoked_bad = epochs[reject_log.bad_epochs].average()
    plt.figure()
    plt.plot(evoked_bad.times, evoked_bad.data.T * 1e6, 'r', zorder=-1)
    epochs_ar.average().plot(axes=plt.gca())




.. image-sg:: /auto_examples/images/sphx_glr_plot_autoreject_workflow_010.png
   :alt: EEG (32 channels)
   :srcset: /auto_examples/images/sphx_glr_plot_autoreject_workflow_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 201-205

As a last optional step, we can do inspect the reject_log and make manual
corrections to the reject_log. For instance, if data is limited, we may
not want to drop epochs but retain the list of bad epochs for quality
assurance metrics.

.. GENERATED FROM PYTHON SOURCE LINES 205-210

.. code-block:: default


    reject_log = ar.get_reject_log(epochs)
    bad_epochs = reject_log.bad_epochs.copy()
    reject_log.bad_epochs[:] = False  # no bad epochs








.. GENERATED FROM PYTHON SOURCE LINES 211-212

The modified reject log can be applied to the data as follows.

.. GENERATED FROM PYTHON SOURCE LINES 212-216

.. code-block:: default

    epochs_ar = ar.transform(epochs, reject_log=reject_log)
    print(f'Number of epochs originally: {len(epochs)}, '
          f'after autoreject: {len(epochs_ar)}')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none



      0%|          | Repairing epochs : 0/97 [00:00<?,       ?it/s]

      6%|6         | Repairing epochs : 6/97 [00:00<00:00,  337.23it/s]

     11%|#1        | Repairing epochs : 11/97 [00:00<00:00,  304.55it/s]

     14%|#4        | Repairing epochs : 14/97 [00:00<00:00,  242.78it/s]

     16%|#6        | Repairing epochs : 16/97 [00:00<00:00,  206.57it/s]

     19%|#8        | Repairing epochs : 18/97 [00:00<00:00,  186.99it/s]

     21%|##        | Repairing epochs : 20/97 [00:00<00:00,  174.13it/s]

     23%|##2       | Repairing epochs : 22/97 [00:00<00:00,  164.85it/s]

     25%|##4       | Repairing epochs : 24/97 [00:00<00:00,  157.55it/s]

     27%|##6       | Repairing epochs : 26/97 [00:00<00:00,  151.83it/s]

     29%|##8       | Repairing epochs : 28/97 [00:00<00:00,  145.89it/s]

     31%|###       | Repairing epochs : 30/97 [00:00<00:00,  142.57it/s]

     33%|###2      | Repairing epochs : 32/97 [00:00<00:00,  138.69it/s]

     35%|###5      | Repairing epochs : 34/97 [00:00<00:00,  136.53it/s]

     37%|###7      | Repairing epochs : 36/97 [00:00<00:00,  133.75it/s]

     39%|###9      | Repairing epochs : 38/97 [00:00<00:00,  130.91it/s]

     42%|####2     | Repairing epochs : 41/97 [00:00<00:00,  132.10it/s]

     44%|####4     | Repairing epochs : 43/97 [00:00<00:00,  129.44it/s]

     46%|####6     | Repairing epochs : 45/97 [00:00<00:00,  128.13it/s]

     48%|####8     | Repairing epochs : 47/97 [00:00<00:00,  126.67it/s]

     52%|#####1    | Repairing epochs : 50/97 [00:00<00:00,  128.47it/s]

     54%|#####3    | Repairing epochs : 52/97 [00:00<00:00,  127.33it/s]

     57%|#####6    | Repairing epochs : 55/97 [00:00<00:00,  127.72it/s]

     60%|#####9    | Repairing epochs : 58/97 [00:00<00:00,  129.22it/s]

     63%|######2   | Repairing epochs : 61/97 [00:00<00:00,  130.11it/s]

     66%|######5   | Repairing epochs : 64/97 [00:00<00:00,  131.43it/s]

     68%|######8   | Repairing epochs : 66/97 [00:00<00:00,  129.99it/s]

     70%|#######   | Repairing epochs : 68/97 [00:00<00:00,  128.91it/s]

     72%|#######2  | Repairing epochs : 70/97 [00:00<00:00,  127.92it/s]

     75%|#######5  | Repairing epochs : 73/97 [00:00<00:00,  129.57it/s]

     78%|#######8  | Repairing epochs : 76/97 [00:00<00:00,  132.06it/s]

     81%|########1 | Repairing epochs : 79/97 [00:00<00:00,  134.46it/s]

     85%|########4 | Repairing epochs : 82/97 [00:00<00:00,  136.72it/s]

     88%|########7 | Repairing epochs : 85/97 [00:00<00:00,  138.97it/s]

     91%|######### | Repairing epochs : 88/97 [00:00<00:00,  141.08it/s]

     94%|#########3| Repairing epochs : 91/97 [00:00<00:00,  142.73it/s]

     97%|#########6| Repairing epochs : 94/97 [00:00<00:00,  144.25it/s]

    100%|##########| Repairing epochs : 97/97 [00:00<00:00,  146.06it/s]    100%|##########| Repairing epochs : 97/97 [00:00<00:00,  141.85it/s]
    No bad epochs were found for your data. Returning a copy of the data you wanted to clean. Interpolation may have been done.
    Number of epochs originally: 97, after autoreject: 97




.. GENERATED FROM PYTHON SOURCE LINES 217-228

Finally, don't forget that we are working with resting state data
here. Here we used long epochs of 3 seconds so that frequency-domain
analysis was possible with the epochs. However, this could also lead
to longer segments of the data being rejected. If you want more
fine-grained control over the artifacts, you can
construct shorter epochs and use the autoreject log to mark
annotations in MNE that can be used to reject the data during doing
time-frequency analysis. We want to emphasize that there
is no subsitute for visual inspection. Irrespective of the rejection
method used, we highly recommend users to inspect their preprocessed
data before further analyses.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  51.550 seconds)


.. _sphx_glr_download_auto_examples_plot_autoreject_workflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_autoreject_workflow.py <plot_autoreject_workflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_autoreject_workflow.ipynb <plot_autoreject_workflow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
