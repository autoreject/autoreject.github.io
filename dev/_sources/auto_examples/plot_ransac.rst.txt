
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_ransac.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_ransac.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_ransac.py:


===============================
Detect bad sensors using RANSAC
===============================

This example demonstrates how to use RANSAC [1]_ from the PREP pipeline to
detect bad sensors and repair them. Note that this implementation in
:mod:`autoreject` [2]_ is an extension of the original implementation and
works for MEG sensors as well.

References
----------
.. [1] Bigdely-Shamlo, N., Mullen, T., Kothe, C., Su, K. M., & Robbins, K. A.
       (2015). The PREP pipeline: standardized preprocessing for large-scale
       EEG analysis. Frontiers in neuroinformatics, 9, 16.
.. [2] Jas, M., Engemann, D. A., Bekhti, Y., Raimondo, F., & Gramfort, A.
       (2017). Autoreject: Automated artifact rejection for MEG and EEG data.
       NeuroImage, 159, 417-429.

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: default


    # Author: Mainak Jas <mainak.jas@telecom-paristech.fr>
    # License: BSD-3-Clause








.. GENERATED FROM PYTHON SOURCE LINES 25-27

For the purposes of this example, we shall use the MNE sample dataset.
Therefore, let us make some MNE related imports.

.. GENERATED FROM PYTHON SOURCE LINES 27-33

.. code-block:: default


    import mne
    from mne import io
    from mne import Epochs
    from mne.datasets import sample








.. GENERATED FROM PYTHON SOURCE LINES 34-35

Let us now read in the raw `fif` file for MNE sample dataset.

.. GENERATED FROM PYTHON SOURCE LINES 35-41

.. code-block:: default


    data_path = sample.data_path()
    meg_path = data_path / 'MEG' / 'sample'
    raw_fname = meg_path / 'sample_audvis_filt-0-40_raw.fif'
    raw = io.read_raw_fif(raw_fname, preload=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Opening raw data file /home/circleci/mne_data/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
            Average EEG reference (1 x 60)  idle
        Range : 6450 ... 48149 =     42.956 ...   320.665 secs
    Ready.
    Reading 0 ... 41699  =      0.000 ...   277.709 secs...




.. GENERATED FROM PYTHON SOURCE LINES 42-43

We can then read in the events

.. GENERATED FROM PYTHON SOURCE LINES 43-50

.. code-block:: default


    event_fname = meg_path / 'sample_audvis_filt-0-40_raw-eve.fif'
    event_id = {'Auditory/Left': 1}
    tmin, tmax = -0.2, 0.5

    events = mne.read_events(event_fname)








.. GENERATED FROM PYTHON SOURCE LINES 51-53

And pick MEG channels for repairing. Currently, :mod:`autoreject` can repair
only one channel type at a time.

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default


    raw.info['bads'] = []








.. GENERATED FROM PYTHON SOURCE LINES 57-60

Now, we can create epochs. The ``reject`` params will be set to ``None``
because we do not want epochs to be dropped when instantiating
:class:`mne.Epochs`.

.. GENERATED FROM PYTHON SOURCE LINES 60-70

.. code-block:: default


    raw.del_proj()  # remove proj, don't proj while interpolating
    epochs = Epochs(raw, events, event_id, tmin, tmax,
                    baseline=(None, 0), reject=None,
                    verbose=False, detrend=0, preload=True)
    picks = mne.pick_types(epochs.info, meg='grad', eeg=False,
                           stim=False, eog=False,
                           include=[], exclude=[])









.. GENERATED FROM PYTHON SOURCE LINES 71-72

We import ``Ransac`` and run the familiar ``fit_transform`` method.

.. GENERATED FROM PYTHON SOURCE LINES 72-78

.. code-block:: default

    from autoreject import Ransac  # noqa
    from autoreject.utils import interpolate_bads  # noqa

    ransac = Ransac(verbose=True, picks=picks, n_jobs=1)
    epochs_clean = ransac.fit_transform(epochs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
      0%|          | interpolating channels : 0/50 [00:00<?,       ?it/s]      2%|2         | interpolating channels : 1/50 [00:01<00:59,    1.22s/it]      4%|4         | interpolating channels : 2/50 [00:02<00:59,    1.24s/it]      6%|6         | interpolating channels : 3/50 [00:03<00:58,    1.24s/it]      8%|8         | interpolating channels : 4/50 [00:04<00:57,    1.24s/it]     10%|#         | interpolating channels : 5/50 [00:06<00:55,    1.24s/it]     12%|#2        | interpolating channels : 6/50 [00:07<00:54,    1.24s/it]     14%|#4        | interpolating channels : 7/50 [00:08<00:53,    1.24s/it]     16%|#6        | interpolating channels : 8/50 [00:09<00:52,    1.24s/it]     18%|#8        | interpolating channels : 9/50 [00:11<00:50,    1.24s/it]     20%|##        | interpolating channels : 10/50 [00:12<00:49,    1.24s/it]     22%|##2       | interpolating channels : 11/50 [00:13<00:48,    1.24s/it]     24%|##4       | interpolating channels : 12/50 [00:14<00:47,    1.24s/it]     26%|##6       | interpolating channels : 13/50 [00:16<00:46,    1.24s/it]     28%|##8       | interpolating channels : 14/50 [00:17<00:44,    1.24s/it]     30%|###       | interpolating channels : 15/50 [00:18<00:43,    1.24s/it]     32%|###2      | interpolating channels : 16/50 [00:19<00:42,    1.24s/it]     34%|###4      | interpolating channels : 17/50 [00:21<00:41,    1.25s/it]     36%|###6      | interpolating channels : 18/50 [00:22<00:39,    1.25s/it]     38%|###8      | interpolating channels : 19/50 [00:23<00:38,    1.25s/it]     40%|####      | interpolating channels : 20/50 [00:24<00:37,    1.25s/it]     42%|####2     | interpolating channels : 21/50 [00:26<00:36,    1.25s/it]     44%|####4     | interpolating channels : 22/50 [00:27<00:34,    1.24s/it]     46%|####6     | interpolating channels : 23/50 [00:28<00:33,    1.24s/it]     48%|####8     | interpolating channels : 24/50 [00:29<00:32,    1.24s/it]     50%|#####     | interpolating channels : 25/50 [00:31<00:31,    1.25s/it]     52%|#####2    | interpolating channels : 26/50 [00:32<00:29,    1.24s/it]     54%|#####4    | interpolating channels : 27/50 [00:33<00:28,    1.24s/it]     56%|#####6    | interpolating channels : 28/50 [00:34<00:27,    1.24s/it]     58%|#####8    | interpolating channels : 29/50 [00:36<00:26,    1.24s/it]     60%|######    | interpolating channels : 30/50 [00:37<00:24,    1.24s/it]     62%|######2   | interpolating channels : 31/50 [00:38<00:23,    1.24s/it]     64%|######4   | interpolating channels : 32/50 [00:39<00:22,    1.24s/it]     66%|######6   | interpolating channels : 33/50 [00:41<00:21,    1.24s/it]     68%|######8   | interpolating channels : 34/50 [00:42<00:19,    1.24s/it]     70%|#######   | interpolating channels : 35/50 [00:43<00:18,    1.24s/it]     72%|#######2  | interpolating channels : 36/50 [00:44<00:17,    1.24s/it]     74%|#######4  | interpolating channels : 37/50 [00:46<00:16,    1.24s/it]     76%|#######6  | interpolating channels : 38/50 [00:47<00:14,    1.24s/it]     78%|#######8  | interpolating channels : 39/50 [00:48<00:13,    1.24s/it]     80%|########  | interpolating channels : 40/50 [00:49<00:12,    1.24s/it]     82%|########2 | interpolating channels : 41/50 [00:51<00:11,    1.24s/it]     84%|########4 | interpolating channels : 42/50 [00:52<00:09,    1.24s/it]     86%|########6 | interpolating channels : 43/50 [00:53<00:08,    1.25s/it]     88%|########8 | interpolating channels : 44/50 [00:54<00:07,    1.25s/it]     90%|######### | interpolating channels : 45/50 [00:56<00:06,    1.25s/it]     92%|#########2| interpolating channels : 46/50 [00:57<00:04,    1.25s/it]     94%|#########3| interpolating channels : 47/50 [00:58<00:03,    1.25s/it]     96%|#########6| interpolating channels : 48/50 [00:59<00:02,    1.25s/it]     98%|#########8| interpolating channels : 49/50 [01:00<00:01,    1.25s/it]    100%|##########| interpolating channels : 50/50 [01:02<00:00,    1.25s/it]    100%|##########| interpolating channels : 50/50 [01:02<00:00,    1.24s/it]
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:  1.0min remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:  1.0min finished
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
      0%|          | Iterating epochs : 0/72 [00:00<?,       ?it/s]      1%|1         | Iterating epochs : 1/72 [00:00<00:02,   24.88it/s]      3%|2         | Iterating epochs : 2/72 [00:00<00:02,   23.86it/s]      4%|4         | Iterating epochs : 3/72 [00:00<00:02,   25.25it/s]      6%|5         | Iterating epochs : 4/72 [00:00<00:02,   25.95it/s]      7%|6         | Iterating epochs : 5/72 [00:00<00:02,   26.35it/s]      8%|8         | Iterating epochs : 6/72 [00:00<00:02,   26.68it/s]     10%|9         | Iterating epochs : 7/72 [00:00<00:02,   26.83it/s]     11%|#1        | Iterating epochs : 8/72 [00:00<00:02,   27.00it/s]     12%|#2        | Iterating epochs : 9/72 [00:00<00:02,   27.14it/s]     14%|#3        | Iterating epochs : 10/72 [00:00<00:02,   27.26it/s]     15%|#5        | Iterating epochs : 11/72 [00:00<00:02,   27.37it/s]     17%|#6        | Iterating epochs : 12/72 [00:00<00:02,   27.46it/s]     18%|#8        | Iterating epochs : 13/72 [00:00<00:02,   27.56it/s]     19%|#9        | Iterating epochs : 14/72 [00:00<00:02,   27.56it/s]     21%|##        | Iterating epochs : 15/72 [00:00<00:02,   27.59it/s]     22%|##2       | Iterating epochs : 16/72 [00:00<00:02,   27.65it/s]     24%|##3       | Iterating epochs : 17/72 [00:00<00:01,   27.63it/s]     25%|##5       | Iterating epochs : 18/72 [00:00<00:01,   27.62it/s]     26%|##6       | Iterating epochs : 19/72 [00:00<00:01,   27.60it/s]     28%|##7       | Iterating epochs : 20/72 [00:00<00:01,   27.61it/s]     29%|##9       | Iterating epochs : 21/72 [00:00<00:01,   27.61it/s]     31%|###       | Iterating epochs : 22/72 [00:00<00:01,   27.65it/s]     32%|###1      | Iterating epochs : 23/72 [00:00<00:01,   27.68it/s]     33%|###3      | Iterating epochs : 24/72 [00:00<00:01,   27.69it/s]     35%|###4      | Iterating epochs : 25/72 [00:00<00:01,   27.70it/s]     36%|###6      | Iterating epochs : 26/72 [00:00<00:01,   27.71it/s]     38%|###7      | Iterating epochs : 27/72 [00:00<00:01,   27.74it/s]     39%|###8      | Iterating epochs : 28/72 [00:01<00:01,   27.80it/s]     40%|####      | Iterating epochs : 29/72 [00:01<00:01,   27.83it/s]     42%|####1     | Iterating epochs : 30/72 [00:01<00:01,   27.77it/s]     43%|####3     | Iterating epochs : 31/72 [00:01<00:01,   27.79it/s]     44%|####4     | Iterating epochs : 32/72 [00:01<00:01,   27.79it/s]     46%|####5     | Iterating epochs : 33/72 [00:01<00:01,   27.81it/s]     47%|####7     | Iterating epochs : 34/72 [00:01<00:01,   27.82it/s]     49%|####8     | Iterating epochs : 35/72 [00:01<00:01,   27.82it/s]     50%|#####     | Iterating epochs : 36/72 [00:01<00:01,   27.84it/s]     51%|#####1    | Iterating epochs : 37/72 [00:01<00:01,   27.85it/s]     53%|#####2    | Iterating epochs : 38/72 [00:01<00:01,   27.87it/s]     54%|#####4    | Iterating epochs : 39/72 [00:01<00:01,   27.87it/s]     56%|#####5    | Iterating epochs : 40/72 [00:01<00:01,   27.87it/s]     57%|#####6    | Iterating epochs : 41/72 [00:01<00:01,   27.88it/s]     58%|#####8    | Iterating epochs : 42/72 [00:01<00:01,   27.84it/s]     60%|#####9    | Iterating epochs : 43/72 [00:01<00:01,   27.81it/s]     61%|######1   | Iterating epochs : 44/72 [00:01<00:01,   27.80it/s]     62%|######2   | Iterating epochs : 45/72 [00:01<00:00,   27.79it/s]     64%|######3   | Iterating epochs : 46/72 [00:01<00:00,   27.75it/s]     65%|######5   | Iterating epochs : 47/72 [00:01<00:00,   27.74it/s]     67%|######6   | Iterating epochs : 48/72 [00:01<00:00,   27.71it/s]     68%|######8   | Iterating epochs : 49/72 [00:01<00:00,   27.70it/s]     69%|######9   | Iterating epochs : 50/72 [00:01<00:00,   27.73it/s]     71%|#######   | Iterating epochs : 51/72 [00:01<00:00,   27.74it/s]     72%|#######2  | Iterating epochs : 52/72 [00:01<00:00,   27.73it/s]     74%|#######3  | Iterating epochs : 53/72 [00:01<00:00,   27.75it/s]     75%|#######5  | Iterating epochs : 54/72 [00:01<00:00,   27.74it/s]     76%|#######6  | Iterating epochs : 55/72 [00:01<00:00,   27.76it/s]     78%|#######7  | Iterating epochs : 56/72 [00:02<00:00,   27.75it/s]     79%|#######9  | Iterating epochs : 57/72 [00:02<00:00,   27.54it/s]     81%|########  | Iterating epochs : 58/72 [00:02<00:00,   27.54it/s]     82%|########1 | Iterating epochs : 59/72 [00:02<00:00,   27.54it/s]     83%|########3 | Iterating epochs : 60/72 [00:02<00:00,   27.55it/s]     85%|########4 | Iterating epochs : 61/72 [00:02<00:00,   27.57it/s]     86%|########6 | Iterating epochs : 62/72 [00:02<00:00,   27.59it/s]     88%|########7 | Iterating epochs : 63/72 [00:02<00:00,   27.61it/s]     89%|########8 | Iterating epochs : 64/72 [00:02<00:00,   27.62it/s]     90%|######### | Iterating epochs : 65/72 [00:02<00:00,   27.63it/s]     92%|#########1| Iterating epochs : 66/72 [00:02<00:00,   27.63it/s]     93%|#########3| Iterating epochs : 67/72 [00:02<00:00,   27.63it/s]     94%|#########4| Iterating epochs : 68/72 [00:02<00:00,   27.62it/s]     96%|#########5| Iterating epochs : 69/72 [00:02<00:00,   27.61it/s]     97%|#########7| Iterating epochs : 70/72 [00:02<00:00,   27.59it/s]     99%|#########8| Iterating epochs : 71/72 [00:02<00:00,   27.59it/s]    100%|##########| Iterating epochs : 72/72 [00:02<00:00,   27.60it/s]    100%|##########| Iterating epochs : 72/72 [00:02<00:00,   27.63it/s]
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.6s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.6s finished
    [Done]
    Interpolating bad channels
        Automatic origin fit: head of radius 91.0 mm
        Computing dot products for 292 MEG channels...
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.7s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.7s finished
        Computing cross products for 292 → 14 MEG channels...
        Preparing the mapping matrix...
        Truncating at 80/292 components to omit less than 0.0001 (9.4e-05)




.. GENERATED FROM PYTHON SOURCE LINES 79-80

We can also get the list of bad channels computed by ``Ransac``.

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: default


    print('\n'.join(ransac.bad_chs_))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MEG 0722
    MEG 0813
    MEG 0812
    MEG 0822
    MEG 0912
    MEG 0942
    MEG 0943
    MEG 1013
    MEG 1023
    MEG 1022
    MEG 1032
    MEG 1422
    MEG 1633
    MEG 2443




.. GENERATED FROM PYTHON SOURCE LINES 84-85

Then we compute the ``evoked`` before and after interpolation.

.. GENERATED FROM PYTHON SOURCE LINES 85-89

.. code-block:: default


    evoked = epochs.average()
    evoked_clean = epochs_clean.average()








.. GENERATED FROM PYTHON SOURCE LINES 90-91

We will manually mark the bad channels just for plotting.

.. GENERATED FROM PYTHON SOURCE LINES 91-95

.. code-block:: default


    evoked.info['bads'] = ['MEG 2443']
    evoked_clean.info['bads'] = ['MEG 2443']








.. GENERATED FROM PYTHON SOURCE LINES 96-97

Let us plot the results.

.. GENERATED FROM PYTHON SOURCE LINES 97-117

.. code-block:: default


    from autoreject.utils import set_matplotlib_defaults  # noqa
    import matplotlib.pyplot as plt  # noqa
    set_matplotlib_defaults(plt)

    fig, axes = plt.subplots(2, 1, figsize=(6, 6))

    for ax in axes:
        ax.tick_params(axis='x', which='both', bottom='off', top='off')
        ax.tick_params(axis='y', which='both', left='off', right='off')

    ylim = dict(grad=(-170, 200))
    evoked.pick_types(meg='grad', exclude=[])
    evoked.plot(exclude=[], axes=axes[0], ylim=ylim, show=False)
    axes[0].set_title('Before RANSAC')
    evoked_clean.pick_types(meg='grad', exclude=[])
    evoked_clean.plot(exclude=[], axes=axes[1], ylim=ylim)
    axes[1].set_title('After RANSAC')
    fig.tight_layout()




.. image-sg:: /auto_examples/images/sphx_glr_plot_ransac_001.png
   :alt: Before RANSAC, After RANSAC
   :srcset: /auto_examples/images/sphx_glr_plot_ransac_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 118-120

To top things up, we can also visualize the bad sensors for each trial using
a heatmap.

.. GENERATED FROM PYTHON SOURCE LINES 120-135

.. code-block:: default


    ch_names = [epochs.ch_names[ii] for ii in ransac.picks][7::10]
    fig, ax = plt.subplots(1, 1, figsize=(12, 6))
    ax.imshow(ransac.bad_log, cmap='Reds',
              interpolation='nearest')
    ax.grid(False)
    ax.set_xlabel('Sensors')
    ax.set_ylabel('Trials')
    plt.setp(ax, xticks=range(7, len(ransac.picks), 10),
             xticklabels=ch_names)
    plt.setp(ax.get_yticklabels(), rotation=0)
    plt.setp(ax.get_xticklabels(), rotation=90)
    ax.tick_params(axis=u'both', which=u'both', length=0)
    fig.tight_layout(rect=[None, None, None, 1.1])
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_ransac_002.png
   :alt: plot ransac
   :srcset: /auto_examples/images/sphx_glr_plot_ransac_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  9.227 seconds)


.. _sphx_glr_download_auto_examples_plot_ransac.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_ransac.py <plot_ransac.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_ransac.ipynb <plot_ransac.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
